{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "anaconda-cloud": {},
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.6"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dzhang517/AIT/blob/main/Copy_of_04_AIT_MLP_CIFAR10_exercise.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cW-EyI5Lxpqi"
      },
      "source": [
        "# Copyright\n",
        "\n",
        "<PRE>\n",
        "Copyright (c) 2024 Bálint Gyires-Tóth - All Rights Reserved\n",
        "You may use and modify this code for research and development purpuses.\n",
        "Using this code for educational purposes (self-paced or instructor led) without the permission of the author is prohibited.\n",
        "</PRE>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Example of data exploration, modeling, regulartion and prediction\n",
        "Our exercise today involves loading a standard dataset using TensorFlow Keras API, exploring the data, building a simple neural network, and evaluating the effects of basic methods (activation functions, regularization, weight initialization, etc.). We then perform predictions on the test set and inspect the results."
      ],
      "metadata": {
        "id": "3EX4cCa4WKJu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1. Data\n",
        "The dataset we will use is the well-known CIFAR10 (Canadian Institute For Advanced Research). Explore the details on the Keras website first: https://keras.io/api/datasets/cifar10/\n",
        "\n",
        "After you explored the basic features of the data, let's load it into the memory and explore the shapes:"
      ],
      "metadata": {
        "id": "yY9fztIeWIKt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.datasets import cifar10\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "giRZKTjzX_7l"
      },
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "(X_train, Y_train), (X_test, Y_test) = cifar10.load_data()"
      ],
      "metadata": {
        "id": "bez7q0eiWQCK"
      },
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(X_train.shape)\n",
        "print(X_test.shape)\n",
        "print(Y_train.shape)\n",
        "print(Y_test.shape)"
      ],
      "metadata": {
        "id": "2tJoRq5wXywi",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "55a146e9-ea9f-4b80-af08-3a2d5f585fa1"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(50000, 32, 32, 3)\n",
            "(10000, 32, 32, 3)\n",
            "(50000, 1)\n",
            "(10000, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 1.1. Exercise\n",
        "Display the first ten images of the training data. Hints:\n",
        "* Axis 0 refers to the separate images, e.g. X_train[0]\n",
        "* You can use the [Matplotlib Pyplot imshow function](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.imshow.html) for displaying the image. Just don't forget to import Plotly first!\n",
        "* A corresponding example, but you have to modify the code for your purpose: https://stackoverflow.com/questions/46615554/how-to-display-multiple-images-in-one-figure-correctly"
      ],
      "metadata": {
        "id": "zTCSGFyDlNvf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "fig = plt.figure(figsize=(12, 4))\n",
        "columns = 5\n",
        "rows = 2\n",
        "for i in range(1, columns*rows +1):\n",
        "    fig.add_subplot(rows, columns, i)\n",
        "    plt.imshow(X_train[i-1])\n",
        "    plt.title(Y_train[i-1])\n",
        "    plt.axis('off')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "hIQhHTppmBdO",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 254
        },
        "outputId": "61603c90-4038-4e85-8313-12df3ab47bae"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x400 with 10 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA6EAAAFeCAYAAAB0ABnPAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAC2qUlEQVR4nOz9ebhkZ3nejT5r1TztXXseevc8SWqpJSShiUkWGGMMDngkCUk4Tmznc5yBXImTKw7kJCYcJ87lOPHnYzvkBPswHBPHBmPAAzYgQGLSrJZaPajn3r3nXbvmqjWdP/jMl/t5XtNbMqqmS/fvuvqPp/p913prrXdau9Z9P16SJIkQQgghhBBCCCEDwL/WDSCEEEIIIYQQ8vKBD6GEEEIIIYQQQgYGH0IJIYQQQgghhAwMPoQSQgghhBBCCBkYfAglhBBCCCGEEDIw+BBKCCGEEEIIIWRg8CGUEEIIIYQQQsjA4EMoIYQQQgghhJCBwYdQQgghhBBCCCEDgw+hfwnvete7xPM88TxPbr755hdc/1d+5Ve+Vd/zPFlbW3sJWknISwP7P3k5w/5PXu5wDJCXM3/V/v+JT3wC+v8jjzzyErTy+ocPod+GyclJ+dCHPiS/+Iu/CJ/3+315//vfLzfccIPk83mZmZmRH/iBH5BLly59q8yb3vQm+dCHPiRvf/vbB91sQr4juPp/EATyb//tv5V9+/ZJLpeTffv2yfve9z4JwxDqsv+T6x32f/Jy5y/bA/0FtVpNpqenxfM8+V//63/B/3EMkOsdV///0z/9U/m7f/fvys033yypVEr27NnjrHvnnXfKhz70Ifmpn/qpAbX2+iR9rRvw3UypVJJ3vvOd8FkQBPIDP/AD8vDDD8tP/uRPytGjR2Vzc1O+9rWvydbWliwsLIiIyA033CA33HCDnD59Wj7+8Y9fi+YT8lfC1f/f+c53yu/+7u/KT/zET8idd94pX/3qV+U973mPXLhwQf7bf/tv3yrH/k+ud9j/ycsd1xj433nve98r7Xbb+X8cA+R6x9X/P/rRj8rHPvYxuf3222V+fv4vrbuwsCDvfOc7JQxDWBsIwofQF8h//s//WR588EH58pe/LHfddde1bg4hA+Mb3/iG/M//+T/lPe95j/y7f/fvRETk7//9vy+Tk5Pyy7/8y/KzP/uzcvTo0WvcSkJeGtj/Cfm/OXbsmPz6r/+6vPe975X3vve917o5hAyE97///fKBD3xAMpmMvOUtb5Fjx45d6yZd1/B13BdAHMfyX/7Lf5G3v/3tctddd0kYhn/pXwEJGTa+9KUviYjIO97xDvj8He94hyRJIh/72MeuRbMIGQjs/4T83/zjf/yP5e1vf7u85jWvudZNIWRgzM/PSyaTudbNGBr4EPoCePbZZ2VxcVGOHj0qP/VTPyWlUklKpZIcPXpUPv/5z1/r5hHyktLr9UREpFAowOfFYlFERB599NGBt4mQQcH+T8g3+d3f/V15+OGH5T/+x/94rZtCCLmO4UPoC+DUqVMi8s1Xcr/whS/Ib/7mb8oHP/hB6Xa78qY3vUmeeuqpa9xCQl46Dh8+LCIiDz30EHz+F78QXb58eeBtImRQsP8TItLpdOSf/bN/Ju9+97v/UlMWQgjZDtSEvgCazaaIiDQaDXn88cdl586dIiLywAMPyIEDB+Q//sf/KB/+8IevZRMJecl485vfLLt375Z/9s/+mRSLRbnjjjvka1/7mvz8z/+8pNNp6XQ617qJhLxksP8TIvKLv/iLEgSB/Kt/9a+udVMIIdc5/CX0BfAXr2G96lWv+tYDqIjIrl275NWvfrU8/PDD16pphLzk5PN5+fSnPy0TExPywz/8w7Jnzx7523/7b8t73/teGR8fl3K5fK2bSMhLBvs/eblz7tw5+aVf+iX59//+37O/E0L+yvAh9AXwF3bMMzMz5v+mp6dlc3Nz0E0iZKAcOXJEjh07JseOHZMvfelLsri4KD/5kz8pa2trcujQoWvdPEJeUtj/ycuZ9773vbJjxw65//775dy5c3Lu3DlZWloSEZHV1VU5d+6cxHF8jVtJCLle4Ou4L4BbbrlFMpmMU/uzuLgoU1NT16BVhAwWz/PkyJEj34o/85nPSBzH8oY3vOEatoqQwcD+T16uXLhwQU6fPi379u0z//czP/MzIiKyubkp1Wp1wC0jhFyP8CH0BVCpVOTNb36zfOpTn5LnnntObrjhBhEROX78uDz88MPy0z/909e4hYQMlk6nI+95z3tkbm5O/vpf/+vXujmEDBT2f/Jy4n3ve5+sra3BZ8eOHZP3vOc98nM/93Ny7733SqlUukatI4Rcb/Ah9AXy/ve/X/78z/9cHnjgAflH/+gfiYjIf/2v/1XGx8cp1CdDz4/92I/J/Py83HTTTVKv1+V//I//IWfOnJFPf/rTUqlUrnXzCHlJYf8nL2de/epXm8/+4lfPV77ylfK2t71tsA0iZMA89dRT8slPflJERE6fPi1bW1vyvve9T0REbr31VnnrW996LZt33cGH0BfITTfdJA8++KD8i3/xL+R973uf+L4vDzzwgPzSL/2S7Nix41o3j5CXlDvvvFM++MEPym/+5m9KoVCQ17zmNfLRj35UbrvttmvdNEJectj/CSHk5ctjjz0m73nPe+Czv4j/zt/5O3wIfYHwIfTbEMexrK2tSTqdBo3D7bffLp/97Ge/bd1utyvNZlPa7fZL3EpCXhpc/f/nfu7n5Od+7ueuWpf9n1zvsP+Tlzt/2R7of+f++++XJEnM5xwD5HrH1f/f9a53ybve9a6r1u33+1Kv17+V2pG44UPot+HixYsyNTX1LUfEF8Jv/MZvyLvf/e6XqGWEvPSw/5OXM+z/5OUOxwB5OfNX6f+f+cxn5O1vf/tL1LLhwUtcf8Ii8uyzz8ri4qKIiJTLZbnnnnteUP2LFy/KiRMnvhW/7nWvk0wm8x1tIyEvFez/5OUM+z95ucMxQF7O/FX7/+rqqjz55JPfiu+++276BjjgQyghhBBCCCGEkIHhX+sGEEIIIYQQQgh5+cCHUEIIIYQQQgghA4MPoYQQQgghhBBCBgYfQgkhhBBCCCGEDIxtp2h59evuh7hW2zBlcn4M8XgWPY92TRRNnanxEsST1bIpk02ho1o6V8ACKfs1NjZrEPdDbMtYddTU8aMA4l6vZ8p0u12I84U8xJFEpk67g3mCRqsjWCCxdfq9PsQpsa5yqVQK4koZr12phNdWRCSTwfZ21HkSz/F3CR+vr26biEiYeBD/g1/4DXuc65gPfPLPIL703KOmzOrZ4xBHEV63mV03mDq79t8I8djsLlMmX8DjnHzmYYjPn37K1Aka2OdSqi0jY7b/p/M4Pu961WtNmQOH8Dt0t3AeeObY46ZOHGN/6Qc4hp595mlTp15bg7jXt2Mx6GP/31jHfHTNNp5HRCSM8DhTU+MQj43b+SdKGniMwBSRbgfnl0/8/p/YQkNGHMdXL3S947Dt8zyc6zot7HfrG9h3RUTGx8cgjvrYNwtFuzamsjlsimNujgXbkjIlrh2+P1x/4945j+tpoVAwZXTfSPt4R1zXJIzV+q+OISJS26pDnPezEJd8uwdq9Dp47iL2p0IOjyFi9wyjo1VTZnMT5/x+C+dUl9Nl0FeTpvqKqbTtudkMXqvRUt6UmZvCcXV5eRniVt/urUZGsE4YYItbrS1TZ2EH7tkyGXu902n87H/+4ROmzPXO7376KxC71oBCDvtZNo/3LU7h/4uIhAne67RjJkupW5nRp3Z4rCZpPG7gYRlXX/Uj9Wli9966z0S+HsOOA+u2qfY6PWLVceLYlolUIV3CdVx936LIjhONPkrout4JHvcnfvDIVY87XKsEIYQQQgghhJDvavgQSgghhBBCCCFkYPAhlBBCCCGEEELIwNi2JvSZZ5+BuLbm0L2oV/a9CfxgMqqYOl5hGuJWbLWmTfWOduKhlqHdtRrFdgd1CkGE7yqvpexL2/k0nicM7fvuKaW9yKn339vdlqkTKk2c152A2HcIeQKlRy2krR6iqbSZG1EIcbFoNaGej++3e0pvKw7NSruLeo4wsKK4VNq+5z9M1JUOZqI6bsokUzMYp1FHMrdrn6kTxXgt/bhtysRtvK/dzXU8T8dqH3dM4rjatfMAxDsP7DZ15ncsQDw9PWPKZDJ4n8Mqatl2LsyaOmGI/bTbRa1SbRP1qyIia2t4vdNZ2//Fw4EzNoFty5fwPCIiW/VNiHN5HM9xgtdaRCSj+nZ9q2bK9HsudclwM2yavxdLr40aso1LZ0yZi8exzFYd14lXPfB6U2ekoPu8vd6e0gPxjrx0ZJQHQ+QQh8dqn+Flca/SC+38YvSQDk1otYLz7IjSbvYbdt8Rd3DeLWZQwzpatJrWoupz5azVw62pvVWcYJzP273A1NQkxJubOA9rbw0Rkfk5XMNSDgXf9DSuwxl1nLMXF02dbAavb7WK17Jst00yMYoeCnrciYi02vYeDBux+trpnO0ffaVxbm2hp0KmZK9dSvVNSWwZrX8Plb4z6trx2N3CPUBW9c1I7B6/qTxcfM/253IJ+0OijhM7NJZaL74d7ab6ik5NqL4u+jAu3a4+l9aE6rZ+8zxYJ96G1nQ7cM0ihBBCCCGEEDIw+BBKCCGEEEIIIWRg8CGUEEIIIYQQQsjA4EMoIYQQQgghhJCBsW1jokJaCVUdPjS7lRHRnhkU705PWTOXgjLPcQliOz00XukGKjmyo05WJ5IOlblRjMcQERkdR/G/TkgrIpJVAmqtP9YJxkVEeioxeRBie4uOOukSnifvKBN6KIT3VaLY0CGe135M5RJ+52bLGuMEyoDBdyTibdRtguehQpkx9XtWBN9uoxHEnkM7IG62rHFBP8C+MT45asqkVdLugwcPQXzfPXeaOjtm0GRodHQK4iBthfNFJdpPu3InK2ONTgtF/D2HaVWxgH1srIqGE/v33WTqHD9+Qp3YHrfXw746qpKQZ2wudtmqYzLzRPCeuYT/m5t43zptO3e48kwPO87k2kOG6zv6yi1i6eJZiJ/6yhdNnaCDfTVTxr7accyfI+O4XmoDChGRxMO54bvpjrjW8uuZrEp873n2b/hjk2g62NL3PbIuhKGaUz1Hn5ubxTlzdgrPc/b086bOZBrXktl5NI3zQ9t+X90za44lMjGKBpNJShkejdo1rKj2GSkfv/PUDBoXiYjklSmSa48RJrgujFbx3DtCey1TatebzmCZXMruteI+rpcjlRFTJgleuCnL9UZdrfeBY71fW0XjxEuXVyBO5a3zU7mC82HOt/dAexX11b40DqzpV7uB7S0oY0Xx7T1r9NFIqd+389i+vQchPrAfjR4LeTtutGmPMfFxTJeJ+jDWTkXfLIShmj9ezDrtmrt93RaHqdOLgb+EEkIIIYQQQggZGHwIJYQQQgghhBAyMPgQSgghhBBCCCFkYGxbE5r38H3rSsVWPbQD3+ueKKD+IROj/k1EpLmBmqwots/FnTae21dar5Fq2dRJKw1lTSXMTTu++bhKCN2oOzR8XaUPUwly9TvcIiJllVg66GMCXT+yjcnkVFLdyL57n1YCz57SKWYdojg/xmvZa2LSaIns++M5JWMJHQlpt1pWJzdMhF28Z15oNZW5LGpjttbWIJ6YRZ2miMiuIwcgnt45b8pk9H1UWoggtOPquSuoy2ifWcU6Po47EZETTz8J8StvtFrN1971Soi13qDu0O1cOI8Jw7MZ1Etks1ZfMzmFetoLF0+ZMtm80jN3cGzW63j9RUTSKlH5yAgeo9OxmuhISU3C0Pb/XM4hQB1yhk3z50InIRcRCZQWefHieYhHisqPQESKVdTRrWzierR+5bKpM7NzF37gWz2hnq09l2CffEcYHcF7mHfoJaenUbu5so7zcD5ntW5bmzWIZyanTJmcWoQLBdRL7tiJek8RkZLZd+BElhU7Z+XUvqnd6ZgyO+fxOyYZHCNZx1zY7+N6MzmB2s20Q5vX6+F8XlFztYhIp4fta2zhfqbXs+v0xCTex0IJ919pz9ZJ9/E7dVv2uoQOn4hh4+GvfgXiptKIioj4gn2z08NZqhvhmBARyWTxs5TjOSBSU1s3CdX/271rKYtjtODhvc7rza2IRGpv1GrZ+/rIU49DvLKGe5x9e/eaOpOTqHsuFLE/Jw4/ikiZzsSJHSeevlbfAa+GxLHH1947Lq2p0bluA/4SSgghhBBCCCFkYPAhlBBCCCGEEELIwOBDKCGEEEIIIYSQgbFtTehYDosWHNqGUZXbcmoE3w2PYvuuvf4klbbvaIuPz8q9GN/RTjsEnmn17nSktANJyj5/r6zUsE5g29toox6oHeH74+WC1beJ0iWklM5I550TEUnl8F32Tsvq/ooZPFdavaPd7VrdX0flUoqVqqjWtOeptfF6N9s2H1M3GO6/Z/TaqE8pO/RAI+Oo5bn91tsg3rkPc0uJiDRUjrgTZy6aMnXV55q1GsTrNauxuLKE2pgRlSdUfKvh/dTHfg/izI/Ze/q6e1+NZTLYN2ZnraZVEtRm1pQe7rHHnzJV0iqfV8mRly1U+uV+swaxY4jLlMpVHKnxu75hdaS+oHbDNd9UqzY3Hrn+0DoX19y8uoHj7dy5CxD3Nux4rORRU9Zu1iF+7knUGImIzO7ZD3F1docpo/U/WqbzctDtDopJlQPUpX/qd3H9nFH5PYt5qxfOpXDPMzdlNaFBgGvA+hrmXqwovaqIzS8d97G9GZ37XUR8HztQp103ZbTthZ/H9vf6Vi/Z6+N6k1P7x2Yd1wQRkVIZ512tjxMRWd/AdS6X0XnnTRXpq7Y0mqhr1PkQRUT6dTx3v291gtr7YxipNdU+WifvFBFP7SnTKt9r0bPrZ8rHz1x65a56WgjVb2iNtvVw6ajc7DkP+2o5sc8xOo9sJmfHbFftk5+/iJr+81eWTJ3qCO4Rdi6gR8iUml9ERKpj6LOTdvgCpNSzznbygmrrF52D2nWMRJ0ndmpCX7gedbifHAghhBBCCCGEfFfBh1BCCCGEEEIIIQODD6GEEEIIIYQQQgYGH0IJIYQQQgghhAyMbRsTTVXRiKWSsQLZvBKo+ykUqRYKVuAbhCoZq0MUniRoHtIP8biRQyQeJ/hZogxIkrQVPjf6KGKOIvsd2xGKc0MVNxyJbS9v4HEzKjHzSNN+52AJDVI6W21TZtfkAYinp1Ho7FW2TJ3eJppmNJvYtq2GNSZa20Ix+rmL9riRVnMPGbkciuuDlDWC6BTKEJ+t43V74stfN3U21tEU4fLisimTSWH/0P2nF1oDKm1KNTeF92dl6bypM6KSjDdq1pTi5NmzeNw5TMCcydh+MKcSqc+r+MKSNWM68TR+Nj1nzTrOXVAmQoESzvetcUiUxvkmr5Kz59J4n0VEOl2sMzJiTZLSaWtwQK5HtNGPNUO5fOkSxGcvYHzx9BlTZ7KCc8PCJJqYXLlgx+PTj3wD4jvvr5oyRWV24Vg+yXcIXxkK9nt2rYyU6U2o5+quXcfTykGtXtswZTxlypIok57LV66YOqNlXKOKas9T79l1XBuSZPN2Pg9C3OME6jt7vv1tI9b7vBTGuaydd9VQlHbHmullc2helFWGdsW8HRA5tc5tKaO/rZq9LuU8jjMvZfeGZiwOIR1tbuVY7/UklERqLy52j+yp/uDwg5N+gOMtUKeuFHGOFRFp1HG81ZVpVs9hLpbNYv+oZB3GoSks0wqxb6ZiOwZ6a9ivajXc+5XK9vlobg6NHvfv3WfKlPUeRrU/COz1VlslSQT7c5zY66LnBpf/kTY82g78JZQQQgghhBBCyMDgQyghhBBCCCGEkIHBh1BCCCGEEEIIIQNj20K++SnUsIxkQ1OmXMR3kb1Ev4tsXxj21LvHvY7VTOjkwRMVfPe+VEK9qohIfQv1YqNKx9Xo2vekz1/GOs2efe8/q16V3lHES5jO2ETN59ZrEPcSPG7G8QL8qEo+fd9Nd5oy9StKJ9LG44xOWp1Fr43tbTbx7xC5jK2zcxbbMj09Y8os160+ZpgoFvE7r9Rs/z99EXWMzz5zDGLfoZ+IetgPOw2bcDmldEWdHmo1aw2r3Wy0UG9w7tJxiEsFq2k9vP8wfuDQmj70pS9AvHvvXogPHT5k6kxM4HjNKZ3R6IjVU/oh6idaPfv3sk4bdRidGiY8jyLbJ/MF7N86SfpIxeo9c0rr7kpU3m7beWv4sbqRq4sSX6RoMdGh/sDRFpWp3tvW31yxThzbca41cY029rNLy1bTt6w+i6JpiBembdue+wZqyKdn50yZQ6+8S32CY8t3JZPXy406taOKWae3hTdcf+P2VJ/LZu18rnVTodLD9bp2fzBWwL1Vxrc3IO3jvNXt45yUzdk9UL+nvDTquLZkHRo0rYfzHN4fkdK/FfJ4nMAxP1ZGqhDn89hez7Pa60YT17Cgb8t4SgOqjysOPVxPrRtRH/tpNm21hSPj4+qwdl6ot4Z/DegoHXQvsGPcU/Ouvicu2aCec2LHnlh/1lJ7nHzBof9V/TcKsEy3Z8dj6OFclzjakvXVuDCXwdZJp7GOPm6jjd9HRGTrFO7b1tbXTJmK0isv7EBvmLGxMVMnm9NjX617oe3foVoCQsd6Gjk8FK7GcK0ShBBCCCGEEEK+q+FDKCGEEEIIIYSQgcGHUEIIIYQQQgghA4MPoYQQQgghhBBCBsa2jYnGKyhkTfdrpkxOGa8UVSLhXseVNBUFsNWqFdFqsX8/wmfnILAGJMUyissXV1GM/vx5m5B4tYFtaVttruwuoLj4ba+5DeKFOStq/1+PYvLyr5xegjiMrQFM2lei5dqqKdNu4neqVJSpUGSF2vk8lskq05WiZ42JwggvxK6d86ZMZaNhPhsmquOTEJ++eNKUuXLuLMTFDN6frdamqdOsr0DsOZIn1xooWK91sL+nc/aeTc6g8UlBmXnt2HOrqbNT9YWzT37FlEl52FcDlTR9dW3d1LnllhshPnAQEy7vnJsydcr3vALip567YMr0umh40MvgtYvFmgzFCfblpaVFiLM5a5I0OjatPrHmUZ2ONTgYfl54ZupkO8ZETucKnShbxWIna2NEZIyKHKY92/hk1549EBeVmVW95egLyqTn2EUc94W07XfpLo61Zx5+0JSZ2IGGaWMLOLa80GUGqJLJa1MK39ZxfHRVvBfpQfXdiu/jPUxie1EKJdwndZXJSbaEJkQiIlEL1wnx7LZsdgbvc7iuzu0wkSupJPY9tY6MzqLZjsj2DNYmZ3C+7jXx3CnHHiKjDYSUMUq3Y01Zclks42ft3mpLXbsgwPUoFdl5oatNKWNc9wra3EhE0sqwqRvY6726Zvdow0ZfGZR5kd2vxGoPEzuMtgw5NSel7O9jsY/3Mq2GSdC38242jfeyXMD72O7bZ4dQrSU9x9zXU/NqzsfGpMQaeiVqPdLPPqFYUx895yxtrJgyiz3cc50+j3ulqSncu4qIzM/vhLhcRqPKvMPoLFFmTEHiMCaKaExECCGEEEIIIeS7GD6EEkIIIYQQQggZGHwIJYQQQgghhBAyMLatCZ0en4C4s2HfpfaVlqHZxnfvO337fn7aw/eM24HjvWgVd9T7+NUxq/3qR/jO9plLqP3aqNvzJGl8XzzleC99JI/1ptOohcxvKH2HiBwcmYX4yjged7lm3/PutfE7Pn7SahB9lT02KKnrMIo6km9Wwns0Ooq63YpD59JVyaeTft2U2TNltS7DxPPPY+L4554/bcosXnke4qiB2sHKqL1Ghw/ugfjmG282Za6sotbh/Coed2rW3ufd+/fiuSdQ17i8aXWNyRpqWi+ctzrM1RrqD268Cf//ew+h/lNEpNXE9sdq6CV9q6955quoRz14+DZTZmZHFeKvfv2LEC8t236qk4x3O3juzU2rbS6U8TxxYnUwrba9nsPPC/8bpiPvt0HrPUVERM1LsUqKHTg0cVml4/LMya1WyZzZs9qesTHU2Lz6tfdD/PQTz5k6586ehzgKsf2nU+gTICKS34Pa++jEKVPm6Qcfgvjut6Jer1C0OjptFaC1my4FV7gN/a/W2G57c3GdcHkVfSRc/bTUw7mhrOb8bt/uO8op1F/tmLO+GLkiXtuUshcYK2JfFxGpFvG4lVnstz2H0Pek0shXq3Zv1VPeBl1lnpFJWT1ZUFfzbg/3SbFjnKUy+FmzaefmUMkA9b5vqor7GxGR8RG8vqca6NkxMWavv27eiNL+iojEQcV8NmyEjrVPEymtY1fdt7QWc4qdk9K+nc+VlF0yGT3fOGYc7bGh1oBy1uGBopa12LHMBeq4YYTt9T1bKVH79UhpQKOUY47VeyVHEU9psMMAz1NftF4k56+cgziXxTFbLNpxk1da6VzWzjmZjL6eR00ZDX8JJYQQQgghhBAyMPgQSgghhBBCCCFkYPAhlBBCCCGEEELIwNi2bGNsErUmY2X7Trzv4/vAtTq+ixy0bC4oX+WVicW+c56o/KPlMr6bHIjVIBw/gxrKVg81W/m8zcuWz+J5CiX7XvRYCt93f/T0MsRh317S3ihqQqfGsL2eI59hEKLmtu3IgdRqq/ypIbbNc+Sy0oKfjMrhpHMBiYhk1Dv8Yc/qXpPoRSSSu4746hc/C3F65rAps//GWyAu9LEv33jTQVPn8KEFiKOuI7+Uj/e+JWvYlozt/6lUFeIgxP7eamyYOqNKsx067umFFRzT+fJlPMaI1dPs278HYp0vq1Ozueme+9oTWKdj54Wbv+9NEN9yFHMkdh6xmtDnT5+DuKg0c6NV1L5/E5yj6nWrsej1rp5fb+jQIh0Rt6AQ6tg+lSi9oVOTqPK7njqN+shOx2pyb7gR9cm5HI4tfxuJLOPEjsdYLZv3veo1EF84i2NCROS//8Z/hzhUWuQLqzVTJ1fEMXtw3P7N+MSXHoF4SuUJveFVd5k6bZUHL6NET1nHddloox6y17drgNa57p3Za8pcz/SUpmtjw86hxTau2+NqDc44tlz5stKNtu281dRJy9UtSoXWb6PXwHs0VcG57sQp9AAQESnncc9TLth9Xq+H69HYHOYb9SKHzq6Nbcmry9DoWq1sTuUqXFpeNGUkxvaVR6sQdzt2Xg4D9LgoqPzYlZLVum2oHKvdnvVEqZSt/nrY6Kn+7Dnmiljp97V2OuzZvWxHrZ8Zh1YzpXSWuTSWSTy7R/DU/K1zmCbaoEKM/YC0Hblm++o5xVf75r7jumR0fmZfebr4Dp8a1RY/Zdcj8bAvqtSiTjV/rOb8vsrTW2858n0q3av07POc7Q9/y3F2hL+EEkIIIYQQQggZGHwIJYQQQgghhBAyMPgQSgghhBBCCCFkYPAhlBBCCCGEEELIwNh+PmllOuSZpKSWXB7LFKVkyqTVc7CvVbUiEigRcK4wCvHakk1i3F5D85B94yhyd+jKJa+MiA7v32HK+KpimMLv6DItSafQ1KGSxeswMbbf1Nl/cBfEZy98w5R57iQaYGTTKP5PEiscDkO85X4aRfguQbgWc8cO6xDPkZx3mFi5iGZAr7j1B0yZXA7Nu8aVhnxu3hpQbdSw7148bc0u+jEalPgeisZTaSvIjxJlHKLue+QwB0ginWh90pRZb6IBjK/6cuzKpqyl8aq55by9Lnvmd0KcdyRy9gX79y03oxFKtVo1dT7Z+VOIl67geN0xPW/qREr4n8nYabNet2Yiw47rXqtc4MaUInGYPJipw2HqcPHyBYj/8DOfgrhexzlWROS+tRWIv+d1D0Ccy1lzOv2dXKnZQz1OKpik/i1/7S2mzukTaJT3Z3+ERmf1wF6X5y4vQTzmWZOYfBcv3lf/GPt3esKapfgzVYhbNbx2GYdZx5X6JYi3GvZ6d7s4Tva++adMmeuZ6XG8z2HXrq+VMvapJEQzj1TarpOFAq7Brim0rYys+qEyadFOPyJy4+EDEC8toYlir2dPNDmFa1gYBaZMLGpfp4yV+m07alIFHNMpZcLS2rD9aUuZYY2O2HWiqcwZoxjbm3PsUwNl4rRjF641rv3NZh3vtd4TiYhUx6fMZ8NGW43xtGO/LrHqi+padVrYD0VEslm8j+MzC6ZMQU1LvlpLUgVrKJX42B+2NtexLU27bu/ei6aTjcA+t2xuYt/M5fDZIXCYgnrK4NCsn3YJMGVc/p9Zwe/oK/PUMLD9OVLGRHoRTnrW6C+uXYR4/fIZ25jkhT8HDPeTAyGEEEIIIYSQ7yr4EEoIIYQQQgghZGDwIZQQQgghhBBCyMDYtia008X3jr3Aasr0S82tFr5v3Q/sM2/oo1az2bb6zrr6bMdObHYS2jq7J/E96P3zqA1od+170jsO3QpxNrHC0c0tlehYJ7dft8lkd87OQVxr4fvW+244aOqMjBVVfKMps7mK33tzS2l7svZddj9BzUqg9D8OqYNESq/kO3K8a+3XsFEsY0LujOPr1mqoQcuNVyFuh/biKomFFMYqpkwuVhdcJfZOHKO4G2Dy53xBaYE9q1mIfSxTnrD6yGyCmtVUYQzbkrX9P/awLV6E/dJP2S+QUQnDC2Wr9wh72P/XL6PWZKJkNTp/7c3fB/EjT56DuNmx16XbW4W417FzX7VSNZ8NP46E1kpbsqk0OFubVvPspbB/L62umDJfeeTrED/6zJMQ1zdqpo5OrH7klpshnp6ymueU6ov1hk12X6vhufYsoH5pfmHa1HnXT74T4ouXn4f4a08+Zer0WjiWTl1aMmWKs1hm/dgxiNu/b6rI/lfdDvFmE8dRu211Uj2vBnE/6JkyOkn9sFHO4bW+cf8uU6ZQxHVbz21LF6+YOmGI17JUtv2n1sSFIuXhfOg5dIyNLbyvqyvoaxBYuaeI0ns2m1b3GidYsd3G/UyzbvdNI0Vc1/pKx5Z4VhCXUnrDkYpdGwtFvL7pNN6jSgX3l988LpbR+s6zF1D7JiLiKe+MbMquc422w2hkyIiUnlbbPYiIjOVQuz6ivFY6RceGRe1HMk27xuaVDnp6GsdJt2DvdT9U+/U8tiVVtDr7otIeV0tzpszsJI5Z3Ye6jv1wW5VZWsX9StCqmToZNdbSoe1jqRivXRDguE+n8DuLiMSC10rv/aTjeA5bPAdxb9Nqe5tNuy5cDf4SSgghhBBCCCFkYPAhlBBCCCGEEELIwOBDKCGEEEIIIYSQgbFtTWikchO68r1pXWAhj+9blyv23eTFVXz3++ylVVMmrQR42eVFiLvLts7BadQ2vP5+1F0+f9lqkyo7UEM2OTFryqyo97irVaVvi21eqqzSIKysYn7PdL5m6qzWUDty+YrVZmQyeD2rIyofU8e+l56oPGWeEnjGjhxxvsrb5zlyQ7nyFw0Tc7swB6XrGnS7qKVaruPwylatBi0IlbbHkdeso3Q5gcrFlE7bfIdhCj/TOofpiZqpk2zgWOw7chd6Kr9UoYBj3LdSGYkTPE4UYR/zM7ZSksLzNFtWo+ApjUVO3ZP6qtUsFIqo7X3tvUchPvH8eVPn2LOoxWvWbQ6tbMbqUYYPrYNxaUIx3KqjDu1LD3/ZVDm/iDko1+o1U2ZT3X9faYbzPat/X1nX5/4SxHv2YH5AEZs79LJjPQr6qMHptLG9zQbGIiI6teyNr9wH8ROnnzZ1+g2cVC/VrFazmMX2LoxiPzz7yGOmTiqncnPP45jYCq0O1ozQxGq0e70Xrge6nigrvXupaPuczrM9WsVrW3D4KWyuo276meMnTZlQzbu5LOZ/HS+hNl9EZPEy7jPW13A8dEM7Z9WVjtQm8RVJlLVBrYa5lh0pEqXfww+LRbyW4xOY+13E5h7vhXa+SZQOudPFNSwR2ydDpWvU/TZyzGsFx73WpDN2TAwdKu/taNHqdKtK83n5CuZ47mTtfqWnnie8JbsO751ADej0zh0QP7eIzwUiIony0yi2sH+MluwYePoi+g2UZ+16X87hOD978lmII8d4rB7EvUZ5HvP4ts4fN3VSKo/pSGKfA9rNGsYN9FTIZmyu6HoXx1+his8+E46Jqql03A4ZunNffDX4SyghhBBCCCGEkIHBh1BCCCGEEEIIIQODD6GEEEIIIYQQQgYGH0IJIYQQQgghhAyMbRsTVasobg3T1rSkqRIqJwEKvLcaW6bO+QtoHuJKjlzI47PylbMo1p3JW0H4jh27Ia7Oo7FMpqHU9SIieRQbL9x6ly2yhGL/QojGFZHYZLKtFn42V0QRcD+ybfFKeL0XSvOmTKWKxkmNdTRQWVlGwwMRkcDD79jtK+G+bx2GSjkUb/c7DpOkrDXUGSYSD4XcgcO0p91AU4ecMu1p1K0ZVr+L179dtwY8GSUAr5RQ2D81huYXIiIj42ikMFXFtkRpawTRyeF32tht+1wvUsnWAzQxiULrShErc4DIx/7uOYyJquMo7I8ja5YSqXswOorfMevZvlxTpjFJgH35thutGVm1gtf7U5/6U1NmdXnNfDZsPHMcDRvSaTvmtWnPZq0Gca1p14ALV3BOHZ2eMGXG1b2dmMQ5dPV51S9F5PgxNPv57J99Fs8zYhOVp1Sy+17f9qF+D+fzP/4TjDOOP+3OL6CpRnESr92tt91g6jz+5RMQt8WuEyfXcf0sRDjux0JrHHL6q49CXJvC+X3Dt+fJ9LFM6Jr/2mqM/h+myHXNwizeQ5eBzVgV562UWjcyk9awZHYK+/uff/5BUyaO8TjVCs6pS1fsvmNmDO9ZdRT3FLUVNGkREVlbwT1EdWzElCkpU7BRVaZSsutRZRTXm1IZ+3/YsW05cxrNaVJpu89rK8Ojvpp/+j17j1LK9M5T46qQt8Y5kdo3BUFgygQ9ew+GDT/C7z1btqY3y5tojBOovpqu2DnJV+MkDDZNmd23H4F4U923/pg1Pk15+Ijjj+CYqDn2Ww1lbhUr4zkRkV5X7T3UcS86nmNaq7gf312tQjx/GI2LRERqz2Kfal22hk2by/hZvYXniUK7IG118J4UxnA9rezEWEQkbONzV7djTb98lzPlVeAvoYQQQgghhBBCBgYfQgkhhBBCCCGEDAw+hBJCCCGEEEIIGRjb1oQ2aviecbrv0q6pZ1r1enA6Zd8XbiuN0FjFJgWuqoSynU18N3l63mqIdhx9HcTHLqFW4ORpq127bw61DLWaLTOz/1aIfUEdTL9nk5tXVXbn+gpey0Lf6gvmxlVbIqtTyBxFfUmnhrqohz7zSVPn0kVsX8poOW0G2o6SRQWOv134Do3EUKG0junY9g2VJ152juK1vGFf1dQp51GXlnIkB2/VaxB32zhmCiV77Q8fxP6zc/cCxH4GNdMiIk2l39s5N2ePexb1HiPj+KXHHRqitNLyqPzikjhkBPkS6jvCrtWgaflyRiVK7joSlU9MooalqXRsrRpqokREdkyhPuJtb32jKfOJT/+Z+WzYePjrD0Pcqdsk3qU8zt9vectfgzhM7Dz26NPPQTxasbq5TozamPnpGYiDZasp22rhvW2fQo3lWM6OtdIotr88ZrUx+RLO56NV7MCjI3YMjIxgvyuUsX/f/8Ddps7WGo7zY8fOmDJRgHPMhZrSp2asbje9hGOpsYlxWLFaWb8wCfHli1aDW3f0h2EiUet4zuGDoPWGQQuvSS5l19dEif6j2LG++nguUyK2a8Du3eiDManmsYUrVreWy+F5RkbtfiylvsPKCmq677vbemnMzqO/QJhgP62v233T5hrqAtdrtn+lU7gITE2i9jTWi42IxBHqREeVrnFzy+5tEx+/c79j9Z/ao2AYGR9BPedk2eo7axuoUx9XXis5bXIhVmM+vf+wKbNvbifEz1zA+bCas5rhMMB92vRsFWJ/0mpaW2kcXX7FHndzFfcJu6dxf9XO2v3hZoT9d2MT+7w/t8vUWbjpHogvX3rOlOl2cJ3LqPGZRHYMpNR80avhvm5V7BgI1V7JT9l5KrIS7KvCX0IJIYQQQgghhAwMPoQSQgghhBBCCBkYfAglhBBCCCGEEDIw+BBKCCGEEEIIIWRgbNuYSOvpo44VtSfK1MYXFBtHnnUg2VR6+nrdimgTlZB4TonlX/k932PqLBxGQe/vf/B/QDxbsoLkVB/NLS6fed6Umd13E8T5iQMQlxIr6G1voOi3EKPxRl8Ji0VE1hr4WXVqrykzMbsH4k4TDTF8648hURYF9Z4S3AeBFVR7IaqNvcSqj8Nw213puuR1994B8b6bbjVlFi+jQcOOeTQHOnRwv6kzO4UJ0FOJFe03GjWIewH2DX0PRUTKJWWwUkYDoVTWmo9klNlSp2XNIm6/GQ2N9hzaA3HgMMhI1N+6whjnhcRh1pHKYH8Kug6DCWVm4CtDAS9vjyuqTE8ZaqVT1mwk6tcgnnKYGbz6Na+05xoyzpxDI4itFZtQ/ODegxAXCtgPFxdxLhQROX/2AsTlku2bps/Xca7u1BymIGpcHNi/D+L9U2hiIiJSUcZaKytbpszYOPahuZ34HRt1O59n0dNG8jGuhSOOtnzvm3Bd21CGfCIiy5fweq718ETFLVtnWhknpT0cWzsqOG+JiJRmZiG+fO6cKdNv27VvmLhw8RLEeo4VEWk00HxEm6X0xc6PURrnnGLFmr30O8q4ZQr3EDnfGnPt37cDy6i2+Bk7zrLKmKhQsPOhr8ZV0sH73qvbvWEwiu2bmMP+7oe2/bt3otlLLm/7cr1VgzibxXUj7dl9Sajm/FQax2LUs3uglDJcS0Jrelcu2XEzbOyexe/4Q9//gClz/sweiBtd7A+9rr2+YQ/79555a9KTKJOpZBLnpC3H3rXVxnMvTOJ+K1RmYyIizRbukZO8NdMrJzj+UjHuiWdG7dhqreB+qnkZ14mgZ9tSmsExMH/kNaZMHOAatbKIzy3tpmNeVu0dKeEYSIsdj4kaSkHbPgfoZ8DtwF9CCSGEEEIIIYQMDD6EEkIIIYQQQggZGHwIJYQQQgghhBAyMLYt5FOyEYkCq23wVLJ4Jb+SpOOoo16DHp8omjKzRXxf/PY7D0F8432o/xQR2VzBd8FzIb43vW8B37UWEYlVY2anbaLysIttadfwPfR+aLVJQQcvcySoKXv+MmpNRESePvYIxPfdY993n5idgLjeQH1Qxl5KmdyD2oZY3bOo79B7Ko3E1mrNlOk1HCcbIu44egPER15hNaGdm1HzWRpF7ZV9418k8ZSO2qFJHC+h9iFR48r1l6Q4xrPpZNDiGL+9HuoA9h+wuoxCFvtPp4XjKvEdU4rS5SRqMokTq/eM1HVxJR3vd7C9UYxt89NWn+Crq9VYR13G+bMXTZ1XvfoVELcDq7EouvSnQ0ZrC+91u2t1I7kiao+3Gljn/MVzpk5VjZOoZRPBe13UYF1ZOo3x4pqt42OdH/vhH4I4bm6YOp/78hewvU9dNmUmRlFbt3QK7/0Oh55pK8AE7pLBuXp8YsbUueXwzRD332bH1v/4/3wI4k4Dr91izerzJI3t7/VxrmiurZsq8+oeZR1awcnpqj3XENHuYH+KHfqnvvJPGJ9CDV0c2/1Bt4tz8c6dO02ZZ4+dgDij5ra5WbtXmVK60ZTa32TsLZRsDvtYUY1nEZGU1vB3cH3q1K12c2MV+3viYz8tOOZPfe6Ril0D6m0cw0mE17KQt9o8T/V/7YMxUrB7mUhd75Fi1pTJWMuToWMkhfft3tvtXHfXEdQiN9o4bgK9gRGRIMR7G7bt2tJRa8DePp6n3bN712YLj5NRXhObjr6a34v3ttOz+t+kOgnx5aUrEJ9SPgciIjeNoR71wqpaf2LbgaI86sPLu283ZV6zfw/EGxdRE3risUdNnZUlnE9KnvJ36KG2XUSkG2H7vNjuaNMvYhDwl1BCCCGEEEIIIQODD6GEEEIIIYQQQgYGH0IJIYQQQgghhAyMbWtCY6V16Dhy2mRV7s20yn+V8q2u8cAs6hbyBftcvGc3aiRufTXmT5s7fNTUeeIrH4R41048z+yRW0yd7BRq+tJFm7utrXIedeqoD1tetJqyzWXUfEYq512hYnUXk5N47S4uPm7KzMzhO/GhyomUdOy77F4L3/2OEnxnXuv1REQKKndYdtaKSeq54dbEFXTeTUfuqFJRDSeVf8whaxRPa0I9ex1jlcsqDlTs0FRqfXaoFKmO1KKSeFinXLV5z8IIjxNpHUNsD5wIzh06z5xEto7OnZeI4+KFOJ94KvdVzqGxyET4HUtdLJMsWy3K6hnU8y0ctnryNd+hvRsy+koz3HboRk6fRa3mxz/xexB/+cEHTR1P5cZdduQZXD2P82pGLT9BbPVA2Vmcvx/64pcg7tWtjvTZUychbi1bDV9tFc9VncD5e3XJ1qlv4bUaq6JWrR/heUVEvvCFxyAujEyYMmMq791agHrOds+25bLSjSZq7i5u2fuaUpq+6oRdG1Op4c4VrfX6rnyHOaO3xTU4l7f7G1/N51HfzkGNzRrE7SZq2fbusjmoC+q+louoLxsds3rJIERNZRQ5cmam8DtMTuJxV1Zs+68o/dujx56C+IDDf2BlFb/j4hWbtzoUvL7VEWxLxuHEkMvheA3VOt3rWk26XtaK41VTpt4c/jWguYH7x0tnj5kyCzswp/2OOdS7p4s2D26sfCPqa3ZurtXw3BPjOB+2HJ4z7Q7231YT57ZG085jh1U+6VbLoY9UfhRTBdwPZnq2LXfcfR/EG20sc27J5qTu+9hXo47tmzKGevD5o3j9p45+r6kSbuKeZuP41yA+e+wbps7a87hG+Vl7Xfy0y/nk28NfQgkhhBBCCCGEDAw+hBJCCCGEEEIIGRh8CCWEEEIIIYQQMjD4EEoIIYQQQgghZGBs20kgo0wHNhttUybqonq7UEThe8q35iLTE5gY+OKVmimz//Y3Qbxwy5tUiTHRBA0UzY5WUIA8deg2U6eVRiOWZx634txeB49br9cgXrtsk9SmlLg/n8druWMvGgyJiBw9dADiMFUyZTKpKsZZFDqnHQL79nlMvq4Np0LHnyWaKRTuFydsW2bmrWnGMFEZxb6RpKw5U7uH9zlRSY57PWvyoIXy/cCW6SmRexii+DsIrAheJ+But3G8tltoqCUiEqrkw5VxK9qvjFYhrlYwaXM+a5N4R7H6Th6apfhizVMqyqxrfcVel24HjSDiGOcBT2xb4gjvyUgFDQV270ITBRGRThvvUeJIOD9asWNi2BhV/SFwzBV1ZZjy7BNPQLx89qyp46tlqJi2Yyvr471M+tgffLHmVgvKuG28gv1j05EQfd+ewxCfjzZNmdoGmv9EuSrEyy3HvNvGeba2gcYQXsqaaHVVAvFa+3lTxs/iGhun1HXK2uO2lVlLpOaTUtYa1pRH8dppcxoRkTix5lDDxOzkLMS5jL0GxRxe/0IR+2XoMPrJKMe6kbydX/bvwHmpqvZW89NVU6ecw3s/UsI5tevb+5yNsf31LduWfAnrZYo4XpdWrUHPxQ1cf06cxv6/tGLHTH0LjxME9rg33TgHcTmPbYna1pxRlGFdooz98lk7/0Rqn+Q5TLjCyF6rYaNawHWusb5kylxR+4jJWRwDo45rV6pU8YNRa16U8nCfU1Hdd7Rs6yRq3QjVvuj4s8+ZOlNTaPRTLFrTrLbat926B9ea1915u6nTCbGftVV3ObjTzp/L67hGLS5tmDJLZ9G070KE5+k6jKAKVTRXrN6Mz1S3Hb7X1NlxFs3Ennr4M6bM6pJd368GfwklhBBCCCGEEDIw+BBKCCGEEEIIIWRg8CGUEEIIIYQQQsjA2LYmtKeSpBZztqqXx3ftMz6+9Jw43pkvlLHOD/74D5oy933/6yEemUR9xPKZ46ZOSp271sBEsKvnTpg6iw18J/sLn/iEKVMuoF6g20OdwuyM1dGNKL3Y2Uv4Dnfft9dlfH4PxIduucOUkQj1bBu1SxC3u1YntdnBc3kJ3sduxyabbSrNRNK0+o0bq7Z5w8QnPvlHEEeZL5kymyoBcHMLEy47JNFGJ7q8vGzKREozND6FCerHJq0eN6d0F62NGsQnT9kxo5Nt79y725RJZbD/j1Tw3Hv3Wv3Ewk7UUu3dp7R6OdtPK0rbE4+OmDKidHSBml9Safs3tpQ618wepWkdwTElIhIorVvKSk1lfNzRviGjrDShaYcOtr+OWpm1kzjX7Szb+dFTup2GIyF3V82RXgH1bTnPah9Xl1E/8+jXnoR4pmK1MuubNYi3OlY32lRTZGetrkrY/pxWnaaQUbqdvtUKrtawLZFvv2MxjcIoz8c+7+dtHVGaUElQa9Vq2e9cr+NnYxNVx2Ht9x4mEnVt84WiKZNRc04mh3G3YTWKQYDzy2jFziW33YbzlO4/mYydlNJp/CxSWj3x7TjLZXHdKJcd+mw1hyYx1sn4dt599jncb7XayscgsonvtRdC1uHD4Ps4Xyceti32rc6ursZ0o43XQY9VEZF+H+efsGevXb/n0J8OGXNqDfD61o9iY3kF4iefOg3x48fs3ntmx06IX/O615oyO6bw3N1N1Bmn0lbjLGptSaexr+6at34yBbX3yGVtfx7JqrFfwfMEkT1uo4PXqhNhXz1+6pyps9lbhfj2fVOmTHMav9PZK6jTPX7e6l6fPIP3pKF8DSZH7Nx20wzu2+587feaMo9/5bPms6vBX0IJIYQQQgghhAwMPoQSQgghhBBCCBkYfAglhBBCCCGEEDIwtq0JjROlWYntu/aeyjcWKq2J51lRXD6H+ofb7rDax5zSoT37xOMQby7a/Gk99c5+YxP1QRdPP2vqNBOV/yqy7/2X0yr3Vh51UVNjVvN0ZRnf0Q5VXsd2w5FX66zON/qMbW8Tcz3m03h9wxxqB0VE1kO83gWlrSrq5EsiUkij7qLR1hookdCRO3GY+OznH4a4unDYlEkivI+PP/x5iHcvYG4mEZHJCdRUXr5k826FaqwVx6sQ932r411WuuPX34V5n247esTUaasx42fs9HD2wnmIT57Csff0MRybIiLV0TLEP/wjb4f4VUcOmTrZBP8+tjC305TpK02o5ys9UGLnm0DwWvppjHNVHA8iIgWlcYpTjlx/5pPhI1bamCSyGsCsyh+ZUXq3XSOYb1dEJFRax4ZDh5kawT7kZ/E+dZZR8y8i0quhZqixjvPlWmz/BlvrYZ09tx81ZZZWMU9obRPPXS5brWxX5ZoNMipnY8/On50Ax7Xv2+udV9chUbn0Iq3/FJGU0kX5Kn9drLWDIrKyWoM4dKQETWeHWxPaD/AeNVo2V7pfQS1Vp4Z9Lgithq5YQG1yyreaxNo69rGe0oRuNe2Y0bq0RPWxTNrer4wai+3IoXNU977fwTIuv5ClpSsQ9xLst72UvS5ZpWlNOfTNOv9uqLTVOUfe6q0uXquldczHm4hDR53gtfI8OwAKju89bDz1+DcgTtbPmzKjE6hbfPQZ1CQ+59A+vup70Pflwx/5kCnz1te/GuKxvMrvWrAa/3RGjccujtmpCbtHjnM4f29uQ+vrqXUvcPy+56k5//R59HD5z7/8n02dtRV8brn7nlebMm/50b8F8fQsXv9SaOeG+RD78zM1nPNjh0/Nitr7HXTkVN93+Cbz2dXgL6GEEEIIIYQQQgYGH0IJIYQQQgghhAwMPoQSQgghhBBCCBkYfAglhBBCCCGEEDIwXoCSWglXQ2vOoUXAkXIv6IsVu86Monj+Tz75KVNmfAZNeaaVSUm/bU0pMhk00ymX0JAn7Uj8XVIGSLPTE6ZMp4Ei9kIKz7O+umbqBH28DpU8mv/0m9aY6NTjj0B85bmTpkxPC44z+J1cyc1LC8o0o4T30c9ZM6a8Mh0aE2tedOORveazYeJH//rfhjg3fdCUaTfQVOjU009CPDdrzXV8ZXpTyNtE5f0Y7/Ohm/HcY3NWXN+exHH1lu9/A8QuA6qWMiZy5Z4PE5wHuiHWWVFCehGR82cX8dxF/I5Ll9DoRUTk3DOnIPa7tl+eWcKk2He98U6Id++ZN3WCCPuyn1fGFRmH4Zo23XKYUmQ9a+YybNSUyUqvbdeAUh/nnKlZvAfr5/GeiYicPoeGB6uBvdfj42ho5Ks5tBXjvCwiEgXYgcM2Gkx0e/Y+hso8b3XJzuetJppbJAHWKeZsou9+B7+Tl8N1I+xa84tsCefqJLJ9rNvDexD72Ja+Y53OZbDPZ/NqrSyiCZSISEF9FgTW9EvPZcPG2mYN4nnH/kCbFYUx3vfxCWvM1airOqE1POopw51YXf7nTp81dXw1J2nTsF2O+dEvY1/otuwYiVRbwj6uT7mUw/BLmXedvIxjfu/UnKkzXkGTx/S4XRtbLTQ02gzxPOms3eI21FjcVHGcOExl1FY549m9bKt9dQOb651VZfb2XGbVlEmt4Hp+4QqaUr329febOv/qX/88xL/6f/6/TZlP/+EnIb5hB46/TNax361gn4ki7M/jo3Y8To2j4U46bftQVhle+R6WaUa2f/TT2K9+/Tc+CPGzzz1t6ui5+uOf/F1TZuHwLRDfchCNHgs5a7Y4kmD75tWUH6btGGgpI8Kkb/v77h27zGdXY7hXDUIIIYQQQggh31XwIZQQQgghhBBCyMDgQyghhBBCCCGEkIGxbU1orARi2bR9/zqfVpoVlVw7Sdkk3nEf3+lfW1syZZqr+FkhqOMxHMmFx8fwffHqPCZwDR1JmC8v4nkScele8JL1Q3y3OuXZtPWlPGqEQnWZUvoDERGlTYr6Vvfqq3tSb6Muqp+zSWor8/i9W4UaxI3Yaoi6LfxbxcTIPlNm0qGPGSZyWbwGJ587ZsrUt1T/SfAeBn17bZtNTGLveY6E9DnsU0EbtXlbq7afLl+4CPEf/ckfQbzZwGOIiGw1sY9VRqwGZ3QMNRSlEdQQXbqE+k8RkenJHRDnR1DD+qVPY9tERDZOPQVx1LfJzE8vLeO5W/idDt5odbujIzgWR8dQd1QoWv3EaAmvf8aRNL1YzJnPho6OmtscEqjQQw1LS12qK569dlfU/NfsO+bDdeybqQxqk9qxrZOo+bGj5uokcWh7lQbnskPjHyptpid4ntVNq08VNa4TpU3KFKxGe0TpjrTHgoidY1JKy1MQux75SrOXUd/ZU+cVEUnU9dXJ2UWsLmrYuLiIc1smY/uy1kfu3DkLsUs3WG9qTaidz1PK36GttL7HT58xdbTvxeJF1OZNjqNvgIjI6GgV4lOnTpsyel/0gz9wL8S5xK4bY9UKxIU6zufrtZqpE6t5wHW9602cz1s9XE/bfbsH8rNK9xrovm37caz6/2bT7scmHT4Lw8aOPQcgjsTuIwKl6c+WUHA4txP3AyIiidrv7pxfMGX+7A9+D+LGEvbfYsGuwTkzr+I8nEvb+VFr4osFq/HX60Q+i+dJ8rYtqx28Vs8cfxbiN7zh9abOrbfdCvEH/vsHTZmvfBH3T/tmq9jWoh03a0u4V33yFHrOZEq2L8+M4HGjjl2PCtkX/rsmfwklhBBCCCGEEDIw+BBKCCGEEEIIIWRg8CGUEEIIIYQQQsjA4EMoIYQQQgghhJCBsW0nAd9DoW0+Z4WriaDxQ0kJekuVSVOnrUTMExVripBWx+1voSFJ7Ns67QwKyWdm9mIdh0nM4aMohn74839uyvQTNBHIKMOJTtMmmh5RCXOzKvltypHovtnF63L2ijW7qNXwuvQ8FOVPHbJ/Y9hRxfvWT/Daba7Z9me7KN4u7bAmRJ22FSkPE411FHJ/7g8+bcpcXLoEsR+gKcJTT6GhlogYw5IwtEmORfWPz37qcxBnM1YEf9srboe4n0VjiHrP3uczF1YgXl8/bsr0u9iWxaVzEJ89Z+vc+Yo7IP5H/+CfQvz1r37F1Am3MOF1vWcNPTrKIOPMI2jG9KVH0YhDRKSURkMMneA6lbPXsqKMiRZ27zFl/toPvwPiO0yJ65+0Ml0LEmug0uzgfdqoY5/fcCS4DjM4HyahNVLoqoTyXg/n7yCxc6ivjFlKozgPp1L2PCk1Nzvy1lszIHUc13F9ZdLnq+PG+gMR8fVxtfGfiEQxzruJPo+zLXguY4bm2bbE6jyuaco5dw0Robrv61vWnGZEGZtp0yHdv0SssWKrY+dm3T2SGNeWSsHe55UNPM4TT5+HuFRYNXV6XW0AZ/tcVhmzHT+Fx50p2n2enkNnZ7HM+nlrSOmlsV+urNr2LizgXiRSZmQ9h8lTWxnYhapOFDsMHUfQrKYf2+O2XIZqQ0YoOA9EjuuQzal9v/Kp0mNCRGR5Be/t2obd715awj1BEmJfdT2TBIGaH9X/5zJ2PJaUEWTKYcJayOM4zyvz0ThlDSYvrOJziyRY5m1vf7upc99990F88eIlU+bjn/xDiB9/cjfEUdc+62wu49zVX78McTrC/aKISDtsQnxm86IpU8zZZ7GrwV9CCSGEEEIIIYQMDD6EEkIIIYQQQggZGHwIJYQQQgghhBAyMLatCc2qJNhth0YrlS9BHKdQX9UO7Lv2qQy+pZ3L2ve6Mxk8braICeZHR/D/RUSW1PvX7R2o95zeiUl3RUQur2Bi8iOvfJUp01zFhNVnTj4DcatZM3XSKfzeo0qb5Dl0F1cu43kunLf6Ez+H33tkBt9Lnxq3SaM9pTX1NvAYY5u2S+yYHod4oWoTCZ9+FjUd32Nfb7+umZuZg/jgnr2mTKLuY9rHOKW1V2ITxycujYUaV5JBPcL8vE3+fP/3fR/ElSL2jdG8TVT+7LEnIT55+nlTZnbHHoi7SjSXciR2PnbyOTzPSUyMXNxzo6mzuIjtG6va9k5nUX9QLOPcsbGEWiURkfXLmHx9dQ3niW5kr3+gNENXanaM3Pd6e2+HjWYDNSH1esuUaTVxrmu11HzjuEwjVZynco6k4xpPieQKaatFyaik9FqrmXHogbRmL4rt3Kw1oVpp5JDKSkqL+lRy9iiymnqtsbTnFQlUmUi1xaVnSmvdqzpuXumdRKx2Kolte3MOPfUwMTaBOsYRx74jr67TRh31hwXH/Bj08Vr2Q3tt0xnsP1mlvepHWsspsrKB5+6GeIzxStXUWdiH3zEIrM633qhBfO4S6vmyU6ipExHxEzxOuYjt96bt/D5SwHmhWbOeCufOn4N4/6FdEPcTO+H0I5yT9PZLa0ZFRHapvVQhb+ebXsdq74aNtRrqMoOwa8qk1VyXqP78+FPHTJ1bbr1DlXnalAnUb2b9tPI3Cexcd+UK7um7PWyv9mcREcmow7hW9kwW+7heSyKHR0Gzi2vj+OQMxJMT1muloTwVZudmTZmNTRx/f/qnn4G427Tr9Po6ruUt5QOQdqzBKTWWxmamTJnpGdu+q8FfQgkhhBBCCCGEDAw+hBJCCCGEEEIIGRh8CCWEEEIIIYQQMjC2rQmdmcLn1WB93ZTpRPgedEu9ipz4Dq2Deid7ZMS+F53N4PvXnRa+J11waHukj5898vDDEO87rHL2iMilS6hr1LndRESKOoeQ0r0WClYnonVSnQ7GYWi1BGX1TvZ9rzhkyuRV/tEwpfRBgc3H1LmI78T7DdT/TBdtfqBXHDqCZaozpsyjV86az4aJjdUNiO+5+z5T5r7XvQ7iXA7FBemUIxeg0k/EDi1BSuWR0xqiTt/e5/VLeD82VP63jTX8PiIiZ5QGdHHF5m4rT8/jBznsP17Wap76IerHP/vglyHevf8WU2fnOOpc874d40WVH7XXRS3PmTrqtUVEymrMREqrtLSJWgkRkcnJPRC3A3uPPvfg1yH+ez/5t02Z6501Nefrfigi0lU5yfoqH3Mmb/ViGaWv0vOjiNVO6xygomMRSZSGJYzwXvtpOx4LRexTWnv6fx0YQpduVKNzcXpOpRHSbuO4dulG01qrqdYsV/t1W6zW1NE2VSSft94Nw64Jbaj7EcdWhzk/Mw1xVmlA2z271peKyiMibe+zl8IbkMlin/NCe5/bHTxOtoBzdXkCc1+KiAQ+jpEwbTWh+arKiZjGMd1w5IE8uA9zF4ZLOM+GLTvmt5q4Rh08cNCUuXTxFMSB0h96ji1us67uo/otply0a5jWsLZa9jumHHunYSNSOcu9lNXGNtU46TTxXi+t2meHX/nV/xPi86etn0NTrTenL6MW0uWnoefMQD2jeJHD20b1B9dc7amxlXg4Tpyzu5pnCyU897rjmSqnfC/qW1YX3evhuc+dw1yinkNjrrcwicpz6rA1kGwG21LK2fmj3bLnuhr8JZQQQgghhBBCyMDgQyghhBBCCCGEkIHBh1BCCCGEEEIIIQODD6GEEEIIIYQQQgbGto2Jdu1EUeqoZxNan76IguTlVZS39iNrXFAuYxNa7S1TJopR2KyFwxsOoXOjiWLdboDHTSX2PJUyJkxeXrLmLZdU8vVYmV/MTFljJU8ZGGzWNiHOlex1qY6iyD3rMLXpaWMQZRDQ6tk6/SaWKcVY5sBOm2x2fha/08VL1tRpfdUK9YeJkjIsWa/bJM2PP/UoxNMqAffMNCYCFxEJAtU3Nmv25F08V1r1px17lVmQiOwcw/5z+eQViFtNK8jXiYaLE1VTJpVHE412B9s2N4fJwkVElhZRKL+2jmNvbt4mU/aUiL/ZsyYgksZ7EsQ4HnIOk7CcMmXpr6O5gfjWOGdmxx6s4zAXMd4uQ0gQqO+d2PklreYg7VWTK1hDG+3i4DlWpVQKjYe0B0XkSEqvTSlSyrwolbVmRn4Gv1M2bfuDNvLR57FGPxbVVY1BmYhItVqFWM8VIiI9ZfwUeXhubULkal8YKjOa0DHWIv3Z1U1Aho1iCc07IoehYE/do7TKfJ/JWCMX3bddvw3oaSmduboZVk+tE14az1MctW1pNNDcreAYr6vKpC+dxrVmrGDbX6ziulHOoxHRzNSoqbOW4D6pWLRjcXoa9yaNOhq3OLzTRPtNjoxWIa6M2O9c36ph29bWTJnEt0Ytw8b4xLj6xM6hnSau570SXhffs/2jpvY9E1PTpszo+BTEoVoE4sSOxzDAfU6k5rogsB0kDr79/C4i0lN7gFjP+Q6DSV+N65rqqw89/JCp8z3f8z0QP/PscVNGN6+vros2thQRidU90IZNkWu/1cfjXjx/0RRJ5V64ORd/CSWEEEIIIYQQMjD4EEoIIYQQQgghZGDwIZQQQgghhBBCyMDYtiZ0ZAzfx+84NIBj0+rdY6WhWFu2OrSu0rSksyOmjCoicaAT0NrjbnVQT1AqoDip27aavk4X3/PvO94XjwKt/8HvrBMhi4iMKI3ByAjqHzodW2dtHdtfLlt9m05E7oX4znY27UgorqS8WaWL2nNgj6nTaeNxv/jFZ02Zp06umM+GiZzS4PS6NVPm4Yf/HOIkwD42UrT3IwiUdrljk3an1d+Kdu/ZCfHN99xk6uzfhTrR2kXUZS5tWk1LVo2R/RNWH7y6ivrsWw7fDPGRWw6bOr/z4f8vxGlBLVLQsmOx38fPEkfCZcnjtUspAeKevftMlZWLJ/ADpRMsOPTZN954COJuu2nK7JyzGpZhY2IC9Ve+WI1WFOFcEYRKa+JZLWG3i33eSzmSgysNSxzjcfuR1eCkYquFgf83WjyROFFrS2iP60peDv/v+O841jpMPE8c2euSUho+rd38ZvuUxinG2Hd8R60T1RpR13Xx5eo6KX1Pho18Aect37Oayk4f9yI51QcLOVvHE7xn2Yyj36oxMTKK2rxu3Xpc9NNqb5XD+9Pp23k3lVJzs91aSb+DfeGK2jeN79hh6gRXcH9QUPNAvmK/89Qozqlr6xdMmfFRtV9U4tlmaL/A4TlcG2O1h2u3rR6u3cLPxpWOVEQksMNz6IgE+5BrzKdVH8/l8DkgnbaPHWNjyi/Dsd7rOVTPbWHf7qPjSGnmo6u3X8s7Q8eNbbZwD9DrYT8z/gkiEqnvpOt86tOfNnWOPYt77UcefcyU8VSfj9T6FDo8CiKlWU3UOhdH9jvrT3zfjtl84tCSXgX+EkoIIYQQQgghZGDwIZQQQgghhBBCyMDgQyghhBBCCCGEkIGxbU1oOo9F8yNW2zBexmfadAffec4U7PvX9U3VhMg+FxfyqA2IMjqnTc3UyRbxuJk0tjeVwvfURUR66j3pvuO97kTlo9MSp8Shs4jURxmdey5rdWi1TdSEdvr2XetRlXsrrTSiftreo7Z6s3t5DfOCbTbtu+CNFupN/uwLz5kyy8OdJlTaWrfryOv3fd//FojjPubLSjm0BbHSKCQOPVZK3ce80lov1ayOtFE7CfFGB8/t5W2e3xNPnIF4/Surpsy+vaj5fOWBgxD3O7b/F1T/TlQuPZ1rVETET+H4jR06u47Sc6SVjmH3gtWEdpuYU/imEdRaf/3Rx02dxfOoI+20bF7TpL1pPhs2RkZwvokjx01RuUN7at6qO/S0OpdiyqGJMxpEFWYc4zGMtc5F6TATh85YaU89R/5Rk6TU/Lf9fzPO1d9/Y0deuX4H1x9XntBY5+tUSRBdLdU6qESVKjrmhqzSp/oO4atL6zVM6FzdxaLdQ5jctKqjphx650jlYA0d+UcTde5GA+9HR+UcdJ07r/Zwfcd6FKh1or1lNZXaa6IyXlUF7H4maOMalcoq/wqHVjbJYHtd+Ttzql9WVS7JpG5zvXs+XpduA+fzTtvOC3l1r135d18OyaI9T+e9tfOu0fSrdSKTsV4CeqJKHNc3p/dGqkzWMf14gnOZ1ndGLh178u21pyIiE5OoydbeHoljPrd6VOxnrZbdRC8tL0O8Z89eU6bR0vspvR+0/VLrRI1G1HFd9HVw5bb2dRLebcBfQgkhhBBCCCGEDAw+hBJCCCGEEEIIGRh8CCWEEEIIIYQQMjD4EEoIIYQQQgghZGBs20mg2VRi4lTZlCmX0GAkU0DxaylnDQ9GR1EA26xbk5VmHcW5TSUcD7pWSF7JYmL1vBJDhz0ruE+n8Zk863hEz+RQnKuTqBfL9pL66qNQGahkC7bOSBWF8BsbDVOmocTEI+P4ndsOg4NT59CY5bmnL0I8M66SP4vIzIIyYPCtaHlytGI+GyZKZTROGHV4EFSmDkGskxHnHX/zyaqE50nBYb5QxDJxF81dGg2HKUUR7+P0/irE+4uYYFxE5NTZ5/EDzwryM0U0nbh8BROIT0yOmTr6s34HjSB6PZtovdXCuaTnMLQJeijkT+exn87Mo0mFiMj5KziXLF/A79xt2rY8/8wTEE9M2OMmY+Pms2HDU/3X065sItJX2e27PZzPXUm8teGBNlgTEUmUqUM/xDm050hu7imTBE8btznML7TZQhza76g/0UdxWF0Yow1tiJF4DiOItDL0SDkMPcx5VOxKVB7hZ8ZnyWGq4at1zlUmDBxGT0NESRnupM2dt3/VzyuTp2bTzmMp1f+zOWvsU1BmdLpMwbFX6WzVIJ6Z3gVxV7t7iUi1hO3NTDkMg9StDwTHvN7fiIgUymgAl1FrmuNSSqDGzOSU3XNmY9w7pZTpY86x50wSbG+xiMct6LaJiKh71DHmL+7Pho0kweuQOBwDPXUz9TSrjdFEHGZFabv30GZQZv521Emp+TyjJjuX2ZsxwXN5UKnjpDz1fOEYA9rfSJvpFSpVU2fHLrX3c5jidfrqeUiZJLmut6eMzvQ64aqj5ylzncTuebcDfwklhBBCCCGEEDIw+BBKCCGEEEIIIWRg8CGUEEIIIYQQQsjA2LYm9NJ5jHs1+659ZQrfRc4X8H3rUftKv4yPYxOajoSttRp+trmeVbE9birG95d1AnHX+8yikse6ntC1ziilEnR3IoeeSb0enolVcuq2TagcdfA7R2mrB6o1sYx6NVw2HPrac6fxYtXWUZ/Xb9nrMjs6C/GNu3eYMo5TDRXtxkn8ILb3OeNhB19eRn3hqWfPmTp5lfg7O1o1ZSanUVM5PzkKsUtDNzGK+mAlqZNuZ9PUmZ5GHemOeatzvLK0BPHJk8ch3tO3yZS1TqDRwOvSbqNOU0SkvoU6V5cmNOqrBOg51B09c2zS1On3UJM4PT0D8Y6jN5s601NYZnJq1pTJq3MPI1on0utZfafWfPb7qO3V119EpK81LA69odYZaX1K3qGj85VGKAp1QnGrr9Hf0fMd2iTVFq0jzTqSm2u6XbwuYejQEKnj6u8sYr+DHmvttp2YtbZK6xb1eUVEwj4e12hERSSft/dgmMjoJPYO3Vc2hfuBq/UVEdvnslofJ7Z/xLHaazmOO1rB9Ujnkc9nldeDiMRqE1Es2zKBGsNdtVdx6bOLWbwuGaWvbbXtvi9fwfWo07fXu6Pakknw2qUc49dPYX/XW7Z2x84/tRqul67xms06tKRDRl/5r+i5REREyQ2N9tGpN1T7aM+h70yUGj9WsfZnERHxlVYzU8A4SVlNaE5/ASf4vfU87OofQR/7ql7nXHXafSzjem7phvgdzD1J2XuUqOMkeg5y9OV0+uqPi8WinS+uBn8JJYQQQgghhBAyMPgQSgghhBBCCCFkYPAhlBBCCCGEEELIwOBDKCGEEEIIIYSQgbFtY6IogyYfQfZOU6YXK/OCcA3i/KgVyFanUCQ+5ltx7ngbRbO1DTRzqa1ZEXOnhV8tCpXQNnEYBIR4nm6na8powW5KCagbXSu67jTxOJkEBcoVv2Lb4qMxSxDYW5UroRg6n0GxfzVrTUD2SRXiW25FQ5XDR281dfYcOADxXfdYE4FLi9Y4ZpiIlcGK7/j7TTrAvjCSwb7w6FcfNHWWlnGMeBlr7nHXXXdA/Op7cextbaHRj4jIU499DeKWMkI5eeGiqXPm3DmIOw6ziCRRpiYjUxDX6w1Tp7GJ37FVR5MHRy5oSSsx/WjFCt7n96IJ0tjEHMTT89ZAaP4Vt0A8PoL932UqYwxhPIfxjGM+GTZ0Ym9tQiTiMFdQhg1OcwNlHuLqD/oeaIOXRLuuiEig2qLP7TJ58JTZRSplTWJ83V7v25tUiFzd+MFlWLMd8yKd5P1q10nEfm993KzDYKiYw/Hnukcuk5JhopDFa+3qP4kyN9T9Z2QEzXZEHGZYjuuojXESZUw0WsA9kYhIWZkBJcqssdNz9P9Ymb8Ea6ZMpYSGR7q7OywfpaWMrTIBXpdOxya5D3001VrbsmtLcx33SdUq7lPXW9aAL19Qc0eC12lzw657DbUWFhzX2/XZsKHXf9dMEGljKg/jnMNETq8tUWQNgzJq/OlxkxY7V0fK9C5UfdVpTqfWAN+xtugx6ql5NpNz7CMyOOfrY7jmE/0dg9BeF1/NBbGe3x3HTan7GG/DtM/1mWmLY725ap0XXIMQQgghhBBCCHmR8CGUEEIIIYQQQsjA4EMoIYQQQgghhJCB4SXbedGXEEIIIYQQQgj5DsBfQgkhhBBCCCGEDAw+hBJCCCGEEEIIGRh8CCWEEEIIIYQQMjD4EEoIIYQQQgghZGDwIZQQQgghhBBCyMDgQ+hfwrve9S7xPE88z5Obb775Bdf/xCc+8a36nufJI4888hK0kpCXBvZ/8nLmr9r/f+VXfgX6/9ra2kvQSkJeOjgGyMsZ7oEGAx9Cvw2Tk5PyoQ99SH7xF3/xW5/96Z/+qfzdv/t35eabb5ZUKiV79uxx1r3zzjvlQx/6kPzUT/3UgFpLyHcW3f/b7bb82q/9mrzxjW+Uubk5qVQq8opXvEJ+/dd/XaIogrrs/+R6R/f/c+fOwaZC//vJn/zJb9V905veJB/60Ifk7W9/+7VqPiF/ZVx7oDiO5Td+4zfktttuk3K5LDMzM/L93//98vDDD0NdjgFyvePq/+9///vlnnvukampKcnn83Lw4EH5J//kn8jq6irU5R5oe6SvdQO+mymVSvLOd74TPvvoRz8qH/vYx+T222+X+fn5v7TuwsKCvPOd75QwDOW//bf/9lI3lZDvOLr/nzlzRv7hP/yH8vrXv17+6T/9pzIyMiJ/8id/Ij/zMz8jX/3qV+W3f/u3v1WW/Z9c7+j+PzU1JR/60IdMuT/+4z+Wj3zkI/LGN77xW5/dcMMNcsMNN8jp06fl4x//+EDaS8h3Gtce6J//838uv/zLvyzvfOc75Wd+5mekVqvJb/7mb8rrXvc6eeihh+Suu+4SEY4Bcv3j6v+PPvqo3HbbbfKOd7xDKpWKHD9+XD7wgQ/Ipz/9aXniiSekVCqJCPdA24UPoS+Q97///fKBD3xAMpmMvOUtb5Fjx45d6yYRMhBmZ2fl6aefliNHjnzrs5/+6Z+Wn/iJn5APfvCD8p73vEcOHDhwDVtIyEuHa0MiIvJbv/VbMjIyIm9961uvQasIGRxhGMqv//qvy4/8yI/AH2R+9Ed/VPbt2ycf+chHvvUQSsgw8nu/93vms3vvvVd+5Ed+RP7wD/9Q3vGOd1yDVl2/8HXcF8j8/LxkMplr3QxCBs7k5CQ8gP4Ff/G61fHjxwfdJEKuKVeuXJHPf/7z8kM/9EOSz+evdXMIeUkJgkA6nY7MzMzA59PT0+L7vhQKhWvUMkKuHX8hy6vVate0Hdcj/CWUEPJXYmlpSUS++ZBKyMuJ3/md35E4juVv/s2/ea2bQshLTqFQkLvvvlt+67d+S+699155zWteI7VaTX7hF35BxsbGqH8jLwuSJJH19XUJw1BOnTol//Jf/ktJpVJy//33X+umXXfwIZQQ8qLp9/vyK7/yK7J371555Stfea2bQ8hA+chHPiJzc3PywAMPXOumEDIQPvzhD8uP//iPw6vp+/btk4ceekj27dt3DVtGyGBYXl6Wubm5b8ULCwvy0Y9+VG644YZr2KrrEz6EEkJeND/7sz8rzz77rHz605+WdJrTCXn5cPLkSXn00Ufl3e9+t/g+lS3k5UGlUpEjR47IvffeK69//etlaWlJfvEXf1He9ra3yZe+9CW+EUOGnvHxcfnsZz8r3W5XHn/8cfn93/99aTab17pZ1yXcNRJCXhS/9Eu/JB/4wAfkF37hF+TNb37ztW4OIQPlIx/5iIgIX8UlLxvCMJQ3vOENcv/998uv/uqvfuvzN7zhDXLkyBH5pV/6JfkP/+E/XMMWEvLSk81m5Q1veIOIiLzlLW+R17/+9fKqV71Kpqen5S1vecs1bt31Bf98Swh5wfzWb/2W/It/8S/k7//9vy//+l//62vdHEIGzkc/+lE5fPiw3HHHHde6KYQMhC9+8Yty7Ngx+cEf/EH4/ODBg3LjjTfKQw89dI1aRsi147777pO5ublv/WGSbB8+hBJCXhB/8Ad/IH/v7/09+aEf+iH5tV/7tWvdHEIGzte+9jU5ffo0fwUlLyuWl5dFRCSKIvN/QRBIGIaDbhIh3xV0u13Z2tq61s247uBDKCFk23zxi1+Ud7zjHfLa175WPvKRj1ALR16WfPSjHxURkb/xN/7GNW4JIYPj0KFDIvJNV+j/nccee0xOnDghr3jFK65FswgZCK1WS9rttvn8937v92Rzc1PuvPPOa9Cq6xtqQl8gTz31lHzyk58UEZHTp0/L1taWvO997xMRkVtvvZUJy8nQcv78efnBH/xB8TxPfuRHfkR+93d/F/7/6NGjcvTo0WvUOkIGQxRF8rGPfUzuuece2b9//7VuDiED44477pDv/d7vld/+7d+Wer0ub3zjG+XKlSvyq7/6q1IoFOSf/JN/cq2bSMhLxqlTp+QNb3iD/PiP/7jccMMN4vu+PPLII/LhD39Y9uzZI//4H//ja93E6w4+hL5AHnvsMXnPe94Dn/1F/Hf+zt/hQygZWs6ePfut103+wT/4B+b//82/+Td8CCVDz5/92Z/J8vKy/PzP//y1bgohA+cP/uAP5D/9p/8kv/M7vyN//Md/LNlsVl7zmtfIL/zCL8jhw4evdfMIeclYWFiQH/7hH5bPfe5z8tu//dsSBIHs3r1bfvZnf1Z+/ud/XiYmJq51E687+BD6bYjjWNbW1iSdTku1WhURkXe9613yrne966p1+/2+1Ot12jaT6xbd/++//35JkmRbddn/yfWOa/4XEfm+7/u+q46DbrcrzWbT+eoWIdcLrjFQKBTkPe95j/ljvIZjgFzv6P4/OTkpv/mbv7mtutwDbQ8+hH4bLl68KFNTU3LkyBE5duzYC6r7mc98Rt7+9re/RC0j5KWH/Z+8nPmr9P/f+I3fkHe/+90vUcsIGQwcA+TlDPdALz1est2fNl5mPPvss7K4uCgiIuVyWe65554XVH91dVWefPLJb8V33323VCqV72gbCXmpYP8nL2f+qv3/4sWLcuLEiW/Fr3vd6ySTyXxH20jISwnHAHk5wz3QYOBDKCGEEEIIIYSQgcH8CoQQQgghhBBCBgYfQgkhhBBCCCGEDAw+hBJCCCGEEEIIGRh8CCWEEEIIIYQQMjC2naLlt376pyDutPqmTCqNz7TezjmIa8WCqXN0NAvxhaceN2X+8CtP4HF6AZ43ZZ+lPc+DOJPLQzw+NWnqjBTwOAd3TZky97/qLojDANuytmVzAmUqYxAfP30e4j//wldMHVHXMpex33FUOc1l0xHEfdW2b7YXr4skMZ4nlTN12gne682u9bLy1an+8KGvmjLXMx95/Echfuhzy6ZMJX8DxKXiCMQZzw63cgnv4eTovCkzVlyAuDo6CvGVtQumzpnVJyEe2YH9cmJHy9TJ5DCfW6dVM2XyeRyvKa8KcRyFpk4UNSAeG8Hvk8sVTZ20YJ2tes+UWV/G69lt4nVp98qmTiLYdzc3rmCdtj1PvbmljmG/4+YGXt8Pv/dhU+Z6Z+cB7N9+Yp0uU8UU1jmMa4CalkVE5NzzixDHsR0nldGKinE+L2fxvCIic3OzENea2KfWa5umzvgErgv9zY4p01xeh3hMOR7O7t5h64RdiLfW8RjNhh2PKbU8B73IlNmqY98sjOEaG0R2DQjUuhDFeNwktufJZrAthXzelOn3cZ148qEnTJnrmf/XZ89BrK/bNz/D9VSPkKzv2KukcE7tx3aQNPrYD82Wp2tzcY4UcS0fKeM9C+00Jo0Ax5HvGLCB4PeOEyzjJY5B/hKhfTUTiXUBUyc2n22jvduw79R7zn/z/XuuXuk6473v/ecQby1dMWW6LZzr0rkSFnCMgf0H9kO8b/9+U0bfy8uXLkL87De+YaqcO3MG4kid2s/YtSZXwP1ItTJiyoyoPZiOx8Zxzy8iMjo6DnGxjGUqFTyGiEihjG3JF+1eKV/A65vK4hoQO/q3GiWSbOfnyAivfxzro4j4amJ65a03XvWw/CWUEEIIIYQQQsjA4EMoIYQQQgghhJCBwYdQQgghhBBCCCEDY9ua0M3LZ7FiZN8HzqTVO9sJ6qtOdaw+5eiN+yCO+1aTNTOJOp2COY59YV+/n9/u4XG3NqweqOmh1qHXtXqgW2+/G+Kgje+/r63b487k1Tva/TrEhZxDt6De2p6uWH3bzfsOQLy6chniTgc1UCIizabSrPqoWsmlrVBkfhbfVQ+y06bM6WfPmc+GCS2VLU1a7e9Tj6IOcOfs7RBXSlYT3e2jBqfTsH2hU8W+HHqo/xmbt8P44E78rJNHDWsjrpk6cR21SbmoZMokqq8GEbYlnbL9dHwEx28xq47RQk2diEi9hVrCxnrdlLlwErXVqZyakzJ2vrl0eQniShm/c7NhdV5hmFWfOMarnQ6HjiTA7+3SxHWUBnHpCs6H05O2T+WV/t337DjJxDhOeptqDExZrczCzATEpQKOiXZ9w9SRHo7rG2+0+s7Z+1AbWy7g5JArW119L0a9ZK+Huuh6zc7VWkO+urhqypw9jx0vO476pVTeamUjD9tSGEGtYD6n+7tIJY/3LZO2c04cb0M4dx2TpHCtdGmt9J/1Oz1cT7uRrZNV183zbZm0j9fbi/U6bX9P0FrNVhf3KinP3mdP7Qd8h37P199bzX3edjSWLwJX79KtS6lr54udo4IAPwu2MXdvS+bqErwPGWNT6FkxNTFjyuxa2I11xpXO3rNeAl4a+6LW+oqIdNV+/PDsHoj333DU1Dlz8iTEW5s459c27Bpw4Tw+61y8cNaUSatbXcjid4r6VqOdSeNcnM+jJjSdszr7fAXn3YLjOaA6gd411XG8R6NVq08tj+I6UVFxoWz3ZCnl3ZFyrAHplF1vrgZ/CSWEEEIIIYQQMjD4EEoIIYQQQgghZGDwIZQQQgghhBBCyMDgQyghhBBCCCGEkIGxbWOis100W2h3tkyZrIfCd4nQ0MZ3COHXzqNhyqOLl0yZ51bQ3CJRYn9tQiQiklfJtINQCdQdgvu8Mpiodaxi/etPn4J4bgK/Yy90idNRZJ1TVz2TcdRRpz7sSN67ZxcKwKsVFA4vXTlnDxvgPSqPoQFMlLGmIMUcmnXMT1px9MWUNQYZJi6vYHL5+b1W7J1KoZh7vLxPlbBGOZfPYjLls5dt8ucd8yhybyV4nrG0NcMKR56D2C9j+3uBNQdo1HBcjaftPc0qU6GRUewLlQIarnzzXPi9+6EyGQrtONtaRrH95hk7VZ185AmISzux/TsOWAOtfAm/d72Bbel1HRnclZHC2ro1iOmrcTWM5LJ4DxKHyUqkElpLiEYF02NoUiEi0t3A/t1p2nuQT+G8VFRJu288jCZtIiIHD+2BeKuJ5j+ZvONvsD62/6Zb9pgie/eg8UO/14I48W37feXXkM4ok5u+w0ClhQZC/dasKXNPF5OBexlc9/yiw5goG6gyqq2O9SirxoDvWHNdZiLDRKDmqUT3dRFjyeOrG6+PISISx+p+uCx4VBJ4UcaQ2aw1wwqVm147wH5ZyDhMh9LqO7pMhpQLm73vrj2Q+mw7XUX1sdjh/qb3fr6H38nVJxN18u102+307WHv/yIihw7jfHPqxClTZm0L59liBffIuYLde3S7uMfMZu2zQtxHY6JWD9eNqWncy4qI3LtjD8SXL5yDuL1Vs3Ve9WqIryxfNmWyGRxbVWXkc+ypb5g6D/75ZyCOVnDv5zsMyRLVv1MO0zh9rVIx1sk4rmU6h+0vKtPMUYfhVGUc93ZjY+OmzMQEmgHecfMNpoyGv4QSQgghhBBCCBkYfAglhBBCCCGEEDIw+BBKCCGEEEIIIWRgbFsT2knhe8YbvtWweFEP4gmVzLQ8YnV03RZqS2uNnilT76JmIlHnjiLblpSqk9bP24F9f7/Vx3OXHe/4f/3JpyA+dAC1SDfs32XqpLMoutmzB/Wdrdi+I798BXVn9UbHlBGVQPzO12Ky3ie+8aCp0glRF9IIsG3rLXuPxjuod9uRsonVu83hTtR88iR+5z37pkyZvYfx3p85dRriVht1DyIiJaXjbTi01sdOPA1xef4gxBMV1I6JiIQ+6mcunUFNqCRW7zmWRa1bIg5tXha/9/goageaW1Z/8NxxPM5YCbVtlRH7t7BgArVUrctWD7e0XIV47wLWKZbtccMYv3dfaVHSWVtncwPvfbtl9Z/eC8/RfN1RquJ8no7ttapEqEksqATcnu2qUkxjmW63bsq0m2sQJ0U898qiTfT9eISaoa6a3yemrWZ4bgH72dy81bAWqngu3eMdsh3JZ7GDaD1h0LLrnhTwQD1H30x6OM79SC3pOTsvF6ZRoxUWsC09x01KPCzj0ufFif1smNCavxejAfQ8e43McRwJ33UZrYUMenZ/kBW8j1k1zuyuwxJocwqxck6HPNjyoipdHd0PA32dXHUSPY6u3m9dviOa4VeEioxVUPu478BBU+bSxfMQb2yg78uI0oiKiOTyqEnMpuzVLKn5r9PF/u3yKFDbXRkdxf1t3zFuwgiPu9Phx1LIVyEuFzGe3LnX1GmrvvmnH/8YxKnQfudsCkdpJrZzc9zBz/wIn326Dq1prPrzqhoDyWmr9RXl+5LSRgciklNa0//Hz/4f9jgK/hJKCCGEEEIIIWRg8CGUEEIIIYQQQsjA4EMoIYQQQgghhJCBsW1NaM7bgHiuaPViVaUyGB/D97zPJlZLWCrgu8g5z74XXfSwmUEJ3zsOQpt/sdtDjU2knrcLRUcOxBy2f3anzTs0v7AT4rUm6sOW6vYd87vvvgvijeUliH/oh19l6nzmU38C8Vce/qops+vm2yF+4OgdED9/GfMQiYicfQjzF2318R3/piOP2Y2vxPN0ApuXcnLSarKGiYsXUHeciL3P9YmLEPd91HdGadtPqyrX0sHDVkuwvILHaamclE89o/SeIhIq3XR1Umk3HGMxk8Pjjo3bPFDlImrkGnXUFqwtW21b3Mfxmx/BPlfvWx3y013MsdobnzBl/GnUnhTzeB02azhniYhcWcTvHaqcw0HP6j2bLdQohlpoIiJ5R56+YWPPEdT/5rp2rggbOH9fvlyD+MRTtq/6CfaPXr1tynghjjdfaSHPPmK11BdUXtNQaRYnZ6wmdFNpQkvxUVNmegRz5c3OYZ1izq5hel3rK41/s2/7VL+OWp/mOZuftq5yaPcb2H87jtzEk4dwDfPVOp2ftnmgvSrqfzyHzijj0AgNE4FS/XkOTai+KiZvqENbGKj8nSmHJtRTec0jwfldpxEVESmqfK8qFaCEbTvOeippbE+ufk/1N0qc2uDB9A2j291Gme8cw+2LISJy/OknIR6ZsHNoIY2dcXN9BeJOx+oap2d34AcOz5lAaXn7SkPpxfa++uqzTAbXhLGxEVPnoYc+D3GlYNf2m47gnr6n9JKOtM8yMoXrRJDGAbm5affVRZW3t5iySu6c8t7x0theV2/XlyrRaXxdY7jfUGXskRvtFz62+EsoIYQQQgghhJCBwYdQQgghhBBCCCEDgw+hhBBCCCGEEEIGBh9CCSGEEEIIIYQMjG0bE2VLWHRfxQqS9yqDidGsMqvZumTqFKsoom1lrVg+zqDK987b0ChnxpF0/Mzp0xBfvHAZYt8h8E1CNHXIO8TR996N515Vzf36g18wdU6c2AVx1FGVStaYpaaSlzcD+/eC01fQ5KMVo/i/Fdo6KzU8bi+PJhQHd6MhjIhIdWYe4tV1ay7ywANHzGfDRNjD/lJbseL6oI3C8lwJRdpjs9boJ8mhKcX0AWsKUo+bEDeVsL8g9rjr69iXK1lMED2/UDV1AkEDga3YmvS0NtYgzqfwuE3r1ySVERzjYRav00rLjt/PfBy/Y5wsmjL7s1gvlWD/X1tEQyERkX4X70kqjYr8bmCNXBJlJlJ2JNv2tLJ/CHnT214DcevciinzlT9CA7VUrwVxu27n1ChSpnEOK4XRIo6/kloTJlLWaK5aVPcprcxRAmuW4l/GPvPEpx4yZc4/8SzE97/xPohvvmGPqVPK4LmyWzjuvTV7XdYvoLFW97krpkxrCc2Kuir5+mK9ZuqcP4UGaukJvE7FXXY9uul7b4E4U7RmHUHkMqQZHvQQd3gzSUqZ09g6dk02piCO/p9Whiq+Ok8qZesEEfaxbhONRZqLtj9NHroZj+H4nUJ7F8bK5cQ1FXqxui6qua7Zczszqv7WxphoOyZEL8qnyFHpJTM8+u5ho4bzzbEnvmbKZFQHmd27G+K+w/yyWC5hXLSmoInqi/ow7Y41W9ReaUEf97/PPfmoqfPYF/4U4lKpZMrMTWH7ZnaiyVA2Yx+tbrnpVojTf+tnIL58EY0WRUS2arjfatSt2WJTzfGtFq65nY7dlAVqn6PnHM8xT2XT+jvaZ6iiw/D1avCXUEIIIYQQQgghA4MPoYQQQgghhBBCBgYfQgkhhBBCCCGEDIxta0KbfXz/dzRl35MO1lDrdbGGOsxX33qDqdPp4/vLOxyyknwR31e+p4rnvmlq0tRpK53CWg41LO0tmxg2UjK/dN++Y777wlmICzXUXYxPVU2d4NjjEGs96leePW7qnFhEDVw37Jkyly+gxnZlHd/Xv+sV95g6u6uYqPy/fvQTEPc7S6bOo9/A99KXl583ZW5/vb23w0TOw3sWdKxecmwWkxFfXl6GuN7F8SAikvgnIb715kOmzL3fh8ctZSvYljbGIiInT6IOoL6JfaPgSMAcZVGXdql+wZSZqKCWYH4sC3FlXGVEF5Gs+ltXSyWZfv6S1UKc+fIWxP2G7XPeTizTXkE939xuq08oVLG94uN99FPq/0WkqPSIfUey7Yz/wrUQ1xs334YJxU937Jy0tYl694ki9s3Qoblda6DOZU7fIxE5UMXjpAX7asazS9nYCHoSZAu4bkSOv8Hm89h/SyWrTNtawfae+BQmN68uHTV1plVS9LCrNM99e55MB8dJzpGMva00Q6LWz2jLeizU1nBdK67iGhzU7LrXewV6BaT22Osd2Vs7VFw+i/NhyrOblYzSHXtZnDu8lO1zuQz2dz+2+uBMD+vFKkF9PuVQUIZ4nDDB8+Rm95gqm20c0y2HNiyt5sjEw34ZOxLde2qs+b46rqNvW42l/Y6J1uCa/786nhH3Oq5lgu116XZjb8gHgIiMjKJ+/Gy7acqsLeG+pxPjdalMWg8IT/kuFPJ5U2ZiCr1J0mkcWz3ttSIihQL21VMnca/9lS9/ydTxIxw3tbU1U2bxEurqc5UJiLNF6+1RHUWt/WvufwDP6xCZd7rKU6Ft5+ZWA/dBy2o/de4sPrOIiJxSnjla97qwgM8JIiITEzMQFwp2rzc+bv1JrgZ/CSWEEEIIIYQQMjD4EEoIIYQQQgghZGDwIZQQQgghhBBCyMDgQyghhBBCCCGEkIGxbWOiqRQKhXeITfQ9MoLmEU9sonHOZg8FtCIiu2cx6euPrOw1ZTJ1FOdOnMLj5p63SZcjJYbeozS/mciKgP00fsfIs8lYe19/DOJRZRgUT1rDpkhn1VUJ20dSVsTcUwlnx+3llmKizGeWUJC840ZrclMp4Xe8az+ajaxsWdOVpSYKvtttmzD3zKlTtoFDRGMTBfgjk9aYYL2O/TBfxj7WbKGJlYhIoMwjnnvWisivXEZDjEoF7+HMjBWRT+9BQX77PPani6vW6KdQwX46MTViyoyNKCMfH8diOmsNBbI+mhmEfTQSiwOHEUSMxmE33mLnjhv24meVIo7FsSlrkNFu4/js9/E6NdbRVEFEJOrjcQpZhwlRNPyJykdHcT5cW1s3ZTI+Xt+yWjc2Y5s4WxLsU1lHtvtdFTxuIYcTYt/x59ReH8/VUCY92YI19EoyeO6iZ/vz9CT232wa7337ojV3u7KCxmChcsHzfWvyIAl+x3TOXhdtBNar4xgo5mz7N5rK0GsZ5/PRim1L2UMjs8i3c1l/yIfAYxfUPiOxBkLacCejjH3SDtMbbbCS8eyFzKj1v6sOMz1q5+o94/jZbB63e+Wi3at0ujgWvdhuPDbr2H86fawThbZvpJT5UjaL/cll9JNS5ku9rjVC89T19JXBTa9v9zO6fekMXv9C3vZ/Xxmfubp6+HL4SSeN9606Zo1ols+cgzivDIPql6zh4bIycXz0scdMmZtuuhXiYgn7d79nzSK1189Tj30d4q16zdQJ1Z4sjlxGW0iiTLSCvjWpaia4ByuqbUQuY/tdQX3H0TFr6pRX5mdZH+O6w5zugQf2Qzwzg6ZD5YqdT9J5bHAc2+uSdxhKXY2Xw7AhhBBCCCGEEPJdAh9CCSGEEEIIIYQMDD6EEkIIIYQQQggZGNvWhN5QwfeBS+s2gWvKx3eEDy0sQNxYRl2MiIgo/c8Ohx6imMUyKaVJ9ByJjrUSoKeTIytNgohIRr3XndZaThHJ+Piud1BBzUTStrqFsIfHjdQb5TO+1S08oBKr9z2bwD2ax/e48+fOQdy2VUSUbvfIDQcgnmvbtswFqKE4tH/elDkwaXWtw4QXK+1J2mp7mp0axDMz+P5+SlAbKSKyuIj9qZ7Yd+rrm3hP0nkcR+stO65GK5gYOV9GvcHIBI5NEZFCDqeDmbE5RxmtEVLjIbA6qSBA7WCSwbFY35wydUaUJOH+750wZXKyAvHcLPbBrGmryMmncUxvbKJeolu3msVEaURGHX09Cu33HjYKas70HN+5sVmD2Fea0LQjoXuixFRhaK9vEKDOpVTE+5hJ2b+nNhqowckqrVelbMdaJot9ptWyydglwnEyXsW5utuza4DKfy5BT/W7ltXZNxpYpliyE/pYGa/VSh3ninze6peTGBOed5V+6eIFq2ndexHnmOk9dv6IYvu9hwmvVMUPErvv0J+opd/sS0REIl0rsZrKotrjBBHes1Lb6uGSstLvjWO/navYNSxVxf60ttUyZZ5fwX55eh3LeCmHgYVgHU/t83Ip67+R8ZXu26H5UxJQo9VzaUKDAK+d1vHmnZpQtc9L7N4wa772EVPmeqer9sRZx/yitbxhgPcgSdv+sbSIa/nzZy+aMl/5ylch9lWfSafs48zUeBU/CLAPpR0/wzXqOD9OVOx6lM3hXOypPhTFdm2M+/hZRumkR6u4ZxOxetRu146BkyeOQ/zQFz4H8blzZ0yd+Xn0glnbVHs0l3Y9j+uc1lKLiIRqbL3++95gymj4SyghhBBCCCGEkIHBh1BCCCGEEEIIIQODD6GEEEIIIYQQQgbGtjWhG4v4XnEvtO8Md1L4/nJ7FN+lLrStHqh7HPMVRin7LnVYwmb6KXzHPOfQbnqCep9QaU8jR46bRL3j7MoFpT9LT++DuFKzz/VdJT3q78Z3v8dCqzsqdfE7hjWrE2muqHxviw9BfOWRJ02dkSOYO3R9CbU+/aLN+xQqmVx7fdOUqWdcapfhodlAnUCqZe9zJYP9NGijDsYXm6+pkEMdle/IS1gZq0IcpbAvdPpWE9pexvuxdwfqU0YLVocpgdIdbVktxFhJaUDUfW93rYZI0tjeWGk3zpy22oKxGdQz3X6H1YQW5CC2N8Jx1G3ZOSoMMB9Zv4P3NZeyWvFCCT9zSZ48384nQ4fShmccMtiM+rtmdRQ16MXY9u+LKg90L7LLUqOr9TQ4ltI5e9+0FmlhJ+oYRyfsXLe2jtqYILDzWqiaFyjdWS5jtZvdDo7zSOXOa9etnrK+UYc4CR35O6dwLQnUPWq27Jrb7uG1DEIc9901HBMiImdPokZr8l7rC5DWySyHjERpfROHF4WnRIqx2TE4ciJrYaPYuST08LO8ylHqx3Z/sLSFC3esypyr2fWop/KC1hz9Z6uNx2mrHMn1wLbFV/OCvnZp37XbUtpNx28mntJmGpluYsdiHKucnzrHs0PrnuicsA49sLmNQ0h1En0ulk8dN2XSaoHsqrlOsnZ+zyiPDe1PISLSVH4rWn8Yp+29rtfQuyZS+5PRatXU6au+6dL4N5u419B61KYjp+2Iyr0ZB9h315ZsjvJWC+fiEyft9X7kG1+D+MyZE3iMpn2+OHsen7syau8aO3J1+ym8vinHRihUOXj/7b/7f5oy5rhXLUEIIYQQQgghhHyH4EMoIYQQQgghhJCBwYdQQgghhBBCCCEDgw+hhBBCCCGEEEIGxraNidabNYgvtmzS1FAJ37PeLMTFsUl7XGUMMusyBumqRLB1FCT3+lY8L5N4rtKhAxB3HWZAzTU0gsjFjmTOSqTcW1UmDjmbcNZTCaDTKlFzXLfXsnAEDY8ka01iiitoPNC6fBni2nOnTZ34AoqfK+NoHLJRtaYI60t4ra6sXDJl9mbnzGfDRCqHfbDTtX2ueR77Qm8N78/0vDUzKBWwv291aqZMJY19bnwGBeGrq3bMpCLsL1FPmQU0rSlFzsNkxH6qaspsrClDmBIaNqw3rCC/o4XxaTzuxct2GppbQNOtfLluyqSVeVeng6ZJSQ/PIyKysAPrjCqjpaXz1lipVFbH9a1ZjWe9lYaOujIkazkMysaKOJ/ks9g3+z07buI09qG21zFlNns4/iojeMEzDleQkRIa+VRH8T5WytbIYqum+nN9y5RJCY6tKTWHuuhqo4o+zgX9vp13m01cF5otu2blVNL0yMfrsNawJkObqi1dZZDRDewYXryMBh/u++gylxkeolAb7jjMadT1j7UBosvQRiW69xzmRaHaM1R87Kd5x88Ja2qO7wY4ZnyHiWJb9ct8yrYlVmOtpNrSD6yxTxThPKANzBKxdWJ17jhxmEkqwyZTxGGwom9B7LgnBs84Htnjvgy86Xbu3APxyW88bMqsb+Gc2dnE+WRhzy5Tx1d9yvcdJlTqVibqgseJNcQK+9ivSgU0xqs75sdGC9tbcLTl0cceg/icMgmtjNrngFIR91dZtWk4efI5U2ezhqaT586dcpRBM71ImWi5DNT0FBNFuo6tkqjnocQxblz37Wrwl1BCCCGEEEIIIQODD6GEEEIIIYQQQgYGH0IJIYQQQgghhAyMbWtCN7uoT1lqW31KoJKOT85MQZzsxES3IiK5MdTT5Or2ve70Ir4X3Vdah6YjuXNURj1QZje+h572rAahVMXjBicvmDKB0p92fYwrr73J1GmrhLlyQr37HTr+FnAF6/TimimSmcWE4bOvuwfiXMEmk904iUlqq20sM7rb6gsvqCS6hZR9FzzjSNA+THhKb5B0bf+ZGkEdcqqDdcKGFQ7GKilzv2s1CmtrOK6SjNLkZFBrICIyNY19Y3oC2zZVtWNRAuwLmZS9p0EKx329hWPz0vJZU2fpEvafDZWTOewdNXUqVTzu0tqzpsyohxq/YhbH3vT8IVNnfgfON16IGpHGjThviIj0lX488qyett2zOsZhI1ZzX9Cw12G8jNd3q4Za3tWO1VhO7kb9zFjJjpOlS0sQj3RRg55L2zoT41WIy0W81+mUXTdGRrDM4gWr12+1vr3ur+nQW3fb+FmsZMWbDl+AWgMLxYnVIqeXcJ3IVnAuaMZ2Pd1S2sae0s31HF4I3RjnhtChM4oC275hwld6T8+hQ9bCNV3GpaMyx3EdVv1eECUY53yHpjiNc1ldaX9LBXuidBbbl8vYLeJWB+eBUgb7Rjlr65zbxL7RVt8n49Ce6u/suX4y0ddTH8Yl91Rl9GFd9yiJ7Xr/cqSYwvlxTmlERUQC5XMR9rSHi72+NTX/BQ4tb0bpOb0I+3OkdfciEvq4LiTKcyads+tGuof3upfYjnfsFGoz1x99AuJiwXq4ZNM4LhL1HTsdu27EWt/pEGumUvo7qH2/7+jPqo/7KTVmHeNRjzXXOHFOXleBv4QSQgghhBBCCBkYfAglhBBCCCGEEDIw+BBKCCGEEEIIIWRgbFsTunPnAsT+2cumTEHJoiL17nfOkUxvs4WaoYcv2hyU80ond4PgiVx5QjsqZ2b/MdSUdVw5vnbsgLh7aNaUaYeoQzu6H3VoLd++C95ZPAdxdgvffw9HrPaufwH1qMGyzV+YmV7Bts2gzi8zPmrqjL3+dohrF69AXJ20OtLby7sh/uyXbX7AXHXKfDZUBHjPsg4NWlnlRMxEOLx0zioRES+Hxy3mrSZ3fQX7d6TkYzfu22nq7JjYC3E6jX2s27LtzwhqiDyHLqCpxvSJs9hPr9SsjtpXeePiGp57PLF6ykNj+PexsG01c/00akRSAerjdP49EZFsAY8zM3kQ4skRm8Os3sL+3nPkUSylJ8xnw0Za67g8u3z0O3ht6g3U03YSO1e/+nvvg/jITTbn8Jc/8hmI1y5jn5kbHTF1Ris4F/f7eO97Ju+jSBwp/VLPoXNUWqT1jQ11ENs/tKas1cRj1LZs/448nAt8x5yztI7r51xVXYei1Tg3YpXPOFZjzbNrQKqo8g475ZDDnSdU651c+iyNWzd1lTIuva3SjXZVHwybyndCRBIP1/9MDu/hjGPfUUhhX9g9aXO7753GPVBJJSl1SK3lS6dR0/2FU9jejb4jJ7vao7k0uGGodWr4/07drtG2XV3H5kq1qHGdatjoKh+AHfN271GujkPcWca5emPT+gK02jhnho65WXQOXjVXx5Gt01d9aLOO82U2a+dUneu341gDmj21lgS6/Xavl9K5cbUU3LFf0flTTd5hsX3T38Y8HEVXm7texLwlL24M8JdQQgghhBBCCCEDgw+hhBBCCCGEEEIGBh9CCSGEEEIIIYQMDD6EEkIIIYQQQggZGNs2Jpqdn4G4cdkK4YtjWmmrjFp8q1q9srYO8X9/8hlT5vAECur/UR4Tchcdj9JJCw0xNp5GY6KNKWvac6aH5j9a1CwiMn9oHuJdY3ic/pVlU6eszH88nam8Ya9LzleJph2JbKMzZyBOFlH8v1mxJjelw2gwNb93P8TdJdv+qSJe71fcfMCU2bl3wXw2TIyMohlDvmQNP5I03sdSFfttGDmSKYfY55pb9j6nmsrgSyUhl44V10sHDSW8NBpHRaE10Mpl8LMgsiYyW8qTKqnfCHEhQFMCEZFCgu3LpdAAbKn2iKmzJ40mWwv5m02ZwMf2ddo45rf6OO5EROINNEXwYjQqqJYwFhGJfRxHjbo1HciWxsxnw0YuwTEwO7XflHk0wvljU7A/zx/B+yoict/9aO52w43zpsxEEZeqP/7//TnE9RreexGRdgvnrY01vLd9h8FUksbFpNFzmXNhvxtTZkw5sf0jUkYbNWXw0Q/tWpPJovFWN7DjcbOLBhMZZRzWSTmM8kSvc3iMdmivZUqtJcVS3pSJtmHCcz2j50PXX/B9T5mPbOeaaDcPR51EnUx53klG7D27s4r37NY77oR4esRu/2J1oqxvTap2TuF87ivTrTC0ddKHcf9Y72CdP3m+ZuokCZbxHGYqaWWilfja/MVlTKSOowxtotiOX32vE5dxyzYMjq53el00GUqnbB8aG8G1MFR1XJeu3cEy2bTtQ50umgHFaj5MO4wU9e33fTx5t2v3W3oMu9x2+n2HYd3/hmvcx6o/m77pMB2yPfHq54rVBfYdz11Ow64XeB7nPPWCj8pfQgkhhBBCCCGEDBA+hBJCCCGEEEIIGRh8CCWEEEIIIYQQMjC2rQndilAMlk5swtlMGg/XT+EbwrXQJqXf6GCZMLFNqmdQA3c5g9qkauJIUuvjZ0mCup2t2L4LfmkFtTIjvtW9bCo53icvfxLiwztQ7yYisn8cjzORm4W4de6yqRN1sC2JIxHv5uaqKoPXsp+3mtBgC7W8/adOQVx0vNXdy6MGZPdNR+xxF8+bz4aJVA+vS+TZ+xEkqFFoq0vZbuI9FRHJZLHQiFc0ZXJKl5MNMSF9KbXb0V7U68Ud1OQUMlVTRyL8m5QXWUXCXAXPNVu9B+JO1DB1Whs47s+uYF8ZS1sd+KjSH+6atvrD40vPQ+x7qEXJeFZD1+/hd+oqbVKn/DVTJ8oqfXbXzguNmtKf3vIDpsz1TruuNHG5EVOmp+bH+d2YzPxNP479RUTkwGHUL2cLdg468mrUjYZqmfjyB/7Q1HniedTMez2sFIWOhN1ZHGsbHasbHR/D+58uZCHu1O0YaGyhZq+lJEUph7aqF2KhLaWJEhFpq7nh+GVcEy6sWe1SQ2nrYqXt6YnVC41MovdBuWTnqQ3H/DZMJOq6ufSGif/tVVEurViitGCe4/onSrebSmMfTFX2mDqeMsvotXDPtpFGzbSISKWIxz21ajXy33iuBnFrfRHi4uxeU8eP8DsFbZxLyr4di90Y6ySeHSNmhVJrcOTQ2WktWxxindhRR+sNXYq6xLF3HTbabXwOOH/ulClTyON8WB2pQNxzaNv9GsZTE9ZbQuswO22lq3cct6/0+2mlNU2l7O9wQYB7uzB0aPx1H1F9yqUZNt3KU2Vc84k6rkvLaeYPhwb0O4Fui3OmexG+APwllBBCCCGEEELIwOBDKCGEEEIIIYSQgcGHUEIIIYQQQgghA4MPoYQQQgghhBBCBsa2ldRZleA3HVsR8KSPBjb9FAp804E1SWirZNs7pqZMmYW9aG5xuamT31oxbFaZ6XjKyaIfW8OJuQk0yEhb7xmpry7hqTdQHL24bs0Ztooo1N7VUwYfa9aYSDp4cj+0fy/ohHiudoTXN3EYKxU7KFq+cvkS/r9D+NxSidarPXthJo8eMp8NE/GKMjMoWPOCvo/GIVllWJLNTJg6fl+ZXYR2jMSq707P3wZxJjps6qwuokOMNg0LC/YeRn0cE52ObUu+gH3KVzPIaHXO1MmOKLOXKfzOWYfJSb2LBgjLnWOmTHkWx0Q+QmOiXrds6qSieYgTZTGxtPG4qZPLoLHC+PhRU8YP7LmGjUvrOPc9/PTDpszUfjSw+bGf+iGI992Ec6yIiJfG+bzXs3Nov4/mEDffcSPE5x9DkyoRkT/72OcgzvbRiCXoWcOJWJncjebtfLhzTpnPKYOJZt+uLZtqnav10DTO9dfgTAaP28jY42aqOHYuXlqHeKlh60zumoZ48RKaGYWBTRTveziX1Tet+VI3tOcaJlJqrnAmpFcmIcbMw2VMtA3zEb3H8WLc31xsYywi8twW7jOeXb8I8eg4zmsiIrEyN6xtWTPJ4NKzEKc3z0H8tr9pjYlWL6N50f5RHIt+3rbl4fO4BqQcniejWVyAKjnsu7ks9lsRES+FZXrKvKbTtt95q4tzxWpv+E2IXHz9Gw9CfPnCWVMmk8Yb1WrWIE7nlXudiJTLuH4uzNl9xNYGHmdTGScWCtaIc7OGdXw10YaR3cd1lCloSmwfejEGPGZY6w+2YUzk4oW3xM4x25mntsOLqcdfQgkhhBBCCCGEDAw+hBJCCCGEEEIIGRh8CCWEEEIIIYQQMjC2/WJ7oYPak8Vw1JSZVpq4sU4NT7aiErqLSNjA9/5vvMnqCXYdPgjxxpMnIJ7zrIZFlJ4mk+DzdsGRWDut3q4uFu276yefPwfxZAuPu2+PTbJ7KYuag+XTeB0KjQ1TxwuVBiSy37GrNLd99cJ7v2V1fxsRanmKRUw433DomVo9bMvG5WVTJr1r1nw2TNy0cAfEUdHqD6IM6nLmqqh/y4/itRYR8VRC7tXVC6bMhrqPqfwBiLvdqqnTCXAs5guYqLzft4nvOy3UN7dadoxESocRRdi2kYrV9hTKOI4ur2J/76asJvRKC3Vq5XWrNUiN4XGD+jmIi77VcowV9kCczuL1D3u2TimHWt6F2YOmTEZ2mM+Gjdn9CxCHZasZvu3OWyE+cCvOC1HSNHWCCPtiP7J+A6KSxWfLuHTtusXek+bHPw9xOsA+VG/ZuS6bxjn0thv2mTJ79uJnWy38Tq0Vqylbaqs1oI1apFTK6lNTaZyry7N2DXjVm+/D4/7h1yFeDFCLJyLy1/7mGyD+4ue+AvFXHzxv6lxWutGgt8uU8Vzr8BCRUnqn2KHGyqaU9l55afRCuyZbHZVDV6X2L55gf+nFVk+2rnTIWTWGKl3H/K6aV+6umTLdpA5xoL5juGn3eUsXcc8WKu31vd/zJlNnUvkPTJet7nXnBK43BbXvy+fsfJ5W/giR0vGGPTsvnF2qQfzfv3zOlLnStWN42Hj+BHozbKzZ/rFv326Ic+o+dvt2DOj9SCZtfx/TfT6ldI0Nh5Y38ZVGWOlRw5bVtidqj9OPbXtjM0QdOm59XF1Dtd+lBXfqwwfAi9WE+lp0u506L+pMhBBCCCGEEELIi4APoYQQQgghhBBCBgYfQgkhhBBCCCGEDIxta0K3Wqhp+cKWfU86VGkQXxWjZqiwgnnmRETyAerQXnHHA6bM/E7UwP3h15/GtvWsvi1KY3sDpVcpJPZd6+4lbF9q3Oo7942hzq8bodYuXbIahKOvvgviDSU52Hh0xdTpqZfO47TVIHbUdyiV1A0oYC4uEZFOFq9DPIG5FbtidT1LSsO3VbM6gM3nTkH8FlPi+uborfdD7I9a7aNfxutdzaPWMZWz9zAlqHN55sQjpsz6BdTgnl3CMZNJ2/5fKON9zAaofUgC209bKidcmDg0c1lsb7uJxz1zzuZrLOfxXFGM007TkT94tYH5DvcHe0yZjcs4xi+cOw5xpm/7crWM13J+D2rbt0Krz45VLsbxzKopU87Z/jBsVOdwPvx7736XKZMt4N81Ax/7hy9WN+WrZahQsNcySbBeqPI8z++2mvRDN6JO9NLTeN+SyPbvVAY1Q/20zbX8xPOomVyp4RqwtGp1r6tb2Mfraj3yU1bPVM5j/777e15jytz1/XdD/JUnMW9f+zTmhhQRKVVxPL71h14L8clnPm7qPPEIasHuf6vV4M7uGTOfDRPZDPZTz7d9eVTlKmwrb4dO3WrQ9C8B25FjZVNYS+c7FhFJK63mrhFs200zVVNnY7MG8VajbcoEMX7vlTr29y88iLkkRURuvvNeiHM5vJZjZesLsHMGc8ZPOTShVeXN4Hv4nYt5u8756tr1VZ7QWtN+5xMXUVsdBXbN9eLh1kSLiKxdwpz2ceTQLKr1vVCsQryyirnpRUTKBcwT2mhumjIZ5d/Q7eI9cKQ1l4LyPNnawuMmofUfKKp9c73jyCetxrVvk4CaOolShdq0oS9O/3k1/abv2375ncgL+p3SsPKXUEIIIYQQQgghA4MPoYQQQgghhBBCBgYfQgkhhBBCCCGEDAw+hBJCCCGEEEIIGRjbNibq11GYfXp92ZTpKLOT6gKa+NyasSLgShoNjvbu3GnKjJTREKMXoQK517aK5GwGxcTdBMtkHYnssyqJbmfDmpT4KtFxnEJB7/K6NV/aPP4sxMU8CoUbeRRli4g0CijU75WtWUerhcmmi5N4nTb6VjzfCPG6+AEaYlxZsqYafl4JtR1GMqX6lvlsmDhw9JUQJxlrWKLNsNIpvD+pyNbxCtgX2sesCP7yRTTp2ehiXCnb/hMuYVuKOSwzPT5t6kyMoElPs22Tmeuk0kEX+0KzhonMRUS6KtmzrwzLml1rntJUdeqxNfTwfBx7GW8G4mdPW5Ok0Uk8zmYax1WmZOeopjJ1Wt+0Y2TvzJ0Q3zHzTlPmeqfVw+tQGrf9ORa8ftpQyEvZv3uGPTQTSRLX30bxXveVMUh1xs6Pb/3h74f4d5Y+CXG7huf9Jjge1307101Oq3ES4tzXC6wRRLqE83khhf17egr7rojI3ffeBPE9b7jDlPGqeK3m9+IaEMfWzOX0aTQveusPoHHe4cNzps6jj52A+NK5K6bM7gPz5rNhoqTuYSplzTw2lPFJu49loshhAKISvDvNPZTJkK/MgaLYGkXevlCF+LUHVd/o2TpbakcYhbb/txvY38tq3bj1DpwLRUTuvOfVWEcZCvV79jy+vgwOM0nt7pJV5n9BYOfzS+fQGOeLjzwJ8SNX7FpzvIbXe6tvTR/99IszlrmeqHdw3i069kH1Wg3idAHLFAu2jvL8kl7XmsaVi3jNu13cuyY9e68Dte9PVH92+fFE6sMwcq0TeK89TxmFvQijnxdTZzvHSfl2PY0TPS/ZfeeLIY5d1+rbw19CCSGEEEIIIYQMDD6EEkIIIYQQQggZGHwIJYQQQgghhBAyMLatCX3jbnwfe3XD6tC+cRaT/H72HGoHCvvse/TFMr7DX0nZpMVBA99Djzx8f7nVs9rHfAq/WqS1SJ7jPWn17vRGy2q/ki7qKLItpZGrWW1D8vwFiIvq2b+vEuqKiDwd4jvx59ZWTJm8ev06G+M78pm8vb1eoBL+1lD32kqstiqtkkRHGat92D1WNZ8NE8VR1L2Ese0/Jm9zBvtKnNgk2Pky6seC1qops3wKNcVJGcfR1OwRU+f0CdRwd7wCxF7Lai7SO3QyZatRuHLhHMStNmpA2207ZlJKb+AlSmuar5k6SQb73MUlqxsdG8XrsHPXAsS9Hn5nEZFOH9vX72FcGbcauq7SLPYd+uecKP3pzabIdU+o9DSOISCiNKBppY8MHbqXRC1DSWLnrSDEeTbx8Z6EGdufdx7dA3FhViUuP46J10VEvDTe/5137zVlfvDH3gjxlWXUR66s1EydRgv1SqGHc8OOOfRPEBHZtQt12/201TxtdlAfvrAbdX9p3665Z07i9y79KF7LO28/YOo8/tgpiDstu85FwQvXA11P1Os417m+b19pxRK1p8huY8elk9qL2F8LUh6WOTBj7/PffB2uC1tqr7K5VTN1xnLYwMtNO9cdvRm1yne/+gE8xviYqVNQ4yqXYF8eG7E6wby6WFnfaljX13C9fOY51C5/6StfNXUe+tJDEG+mqxCP3/cWU6cdYvtjz6Ghc+hyh41OH+9bSux33ljDvcfUzCzEO+atH0U+hx4tG+trpszaKs51caR8L3w7P2Z9XH+m57EtS2u2f2/WcU+wPU3o1fXAuoyOXypNaOTQafpX0aG7NKK6jovtXAdz3BdcgxBCCCGEEEIIeZHwIZQQQgghhBBCyMDgQyghhBBCCCGEkIGxbU3ooXks+hPFXabMzhxqTT53At+t/vNz9p3t23ZjbrHm82dNmZp6Vk6pd5xrfau1myqitjFKlPYutm1ZVbm41opW99pVeU0rHl6X0qjVVMYq/6iso7Ykl7N6jksqB9K6I7/YrNLNFUvY3krJHjdReZ7W+niedMpey9QGfnZzYnOslhv2eg4TSlogSWS1EIHKnxpGeK3jrNWtxeq6ec11UyZsYk7esSnUqfVWbc7e1gpqKMMY39UPmjaf57o6Tipn8x12Og0V43Eabdv+lK+mmRRel4W9dhqankP9nkorJyJW+9AKMEfv3j12jkpHOyBu95+B2E9jDjkRkX6E2tJSecGUcUwnQ4endDChIwdfOo19RstR2m07BqwG1GpYohDPlcnj3Nd3/Dm1UMW2lOerEC+1bD7A0VHsd9P7rb5tdA/Os/n53RAf8DAWEQk6OjcuXofYMZ/4vtZS2+uSS+HAmJyagLji0NplM7guFCsqz+NdB02dsY8/iO119PdCbtvbieuSvtJJJY77kVa5Ir2U0n05pISh2t9kHbqqROX3ninjGvz2u/aZOgtVLNNWWreZqt2rjKk5f7J0rylz4+EbIR4ZRR1yv2/HeC6l8pMrTejGis07e/4c6uy//shjpsw3HsMcn6efPwNxw7HORSoX8Njdb4O448rnrfTwGUe+Y3HmNx4uwg5qKGPX71iR0hsmOLel03bczM6hVnN60uZN/qPnPwPx/Bw+OxSsnYO0VR7zVoD9MIztvlp/J993+BhcRb7p0kZeTS/pyrGp9zjuYyTfJnIf92r6Ttf/689cGtYXo2sd/lFDCCGEEEIIIeS7Bj6EEkIIIYQQQggZGHwIJYQQQgghhBAyMPgQSgghhBBCCCFkYGzbSaCnzH/G81Yge+8hTLi91kJB7KOXbWLY48ubEB9UhjwiIn2VtDhRWdIbXYfZRQ9F+Zm8PoZDQKs+K+SsQL2RoKlKfRcKqCeO3GDqpJQu+Ok/QZOHnY72L4xN4Qc9mxw8rwTeWwFeu9a6NRmaVWZL85NoZJHVJjIiktnA+7a70TRldlar5rNhotPH+97vWIeJrjJ5ihKMw3DD1AkF72t7y5ql+Dkca+kS3qPamjVfWLuCBjt91W/DyPaNcnUOy3StMVGs5oF2B5OFd6MVU8fLomNAOoPjbHIBzysicuAQmi8trVvzpSx6yIjnY5l+y17v2bFb8AMfzQ2Ssr2WJ57DOWpuypomlHJF89mw0enjfUs5zDmyaeybobJJaDvmsU4X+7zbNAGPU0rhPBZ5LiMF7PPVOTQZClPWycLPoNHP+Lg1JgqUiVBf0GTFD+187qkyokyH+oG9Ll6iTG2M5YRINoXrXHkE5/OxSfsd53Zgn498NCqa2GXPs2s/HjeJ7PqffhGJyq8nPHP9rZmUp0y29Ho6WrSmfj1t+BXa46aUocpCGfv74TnbTzvKlMWLsF+W8ta4cPdeNNXy9+0wZXJZHCORWvcaa2gQJyLy6OnTED/zDBrCPf4kGgyJiDx/RpkMNRwmQ+paxco8KuXY5uUncP6uTOF3TBzXP47xs0Ts2ugyVBs2dk3iOjcxbte96hhe30wRF+puZOe61TXcN+zesd+U2bkDjQanJqsQh5F1S1t85jjEazVca/qOW+ap9cfzXGY7L9yA52qmPW7TIWV05pxiVRnTD1+4SZJrDU6lsM+75qkXA38JJYQQQgghhBAyMPgQSgghhBBCCCFkYPAhlBBCCCGEEELIwNi2JtRLYVHPoXuZq6KG8r69mAS7rnR1IiLnakpjlrLvKk/v3AlxKovvoXdD+651t4HvfqeVpiKbwQT0IiKjKg6XV02ZEaUH6tWx/RuBfcm8OoZ6jarSL2W6Vp+3o4R6jazj7wVeCbUZnkpC7jftu/czabx2Wtrr96zWsa2u5WjKtnf/LqufHSaiGC+US1Kcz2Ly76DXgrhfswm5N4IaxMWJqinzuje+BuLFNmoUL25cNnWm9mPfiFWfiwJ7D/uCWt/SyLwps3IRv0O3j2Pk4G2YuFxERAp4sda31iGuTtuxKB5q2TpNOy+MT2F/DxO8LpMzekSLTE3pRNSoY691rMZlqop1cilbZmXRatmHja6WNTqSYAdK4xwEuE649DXZHOrkotDOQbEacF2lLe06xD2BWt0qo6gjTWWtriuTx76Yy0yaMr02niv08TvGPTu20jGeK1ZfMXHodsIA15p2xx635+O129jAOafTt3WKJfyOa0rzHwb2+pcqOJZaLcc60baarGEipzXEDlngoflpiPfPobfD7nG7TtaaeM+2VCwikg1x71QJcK7rd+396PWw/1QqOG8VHTp2Tw2jUsm2d3MT9Xuf//yXIH744a+ZOsefex7itXXVfsd+MtLzS3R1bV5K7VP1XlFEJDOB2kJPlfFjhz5bHTdJ7HyTJN8Zjdx3M/t34nxYrJRNmUypCvH5xTWI1x3a3nYLr/nqLoefww70jlhdRe3xmXMXTZ3LS2oP7+GgTTw7iLVfzNX0ky8WrRH1fXse4wPgWHNN8zy9V7VzQ5Lo5wk9thzfeTuX4UVcKv4SSgghhBBCCCFkYPAhlBBCCCGEEELIwOBDKCGEEEIIIYSQgcGHUEIIIYQQQgghA2PbxkSJTpytnRVEJBujuPymcTz86pwVMbd6WCfsWPOiyQkU9+fLaJJQc7jEBH00SQhV3EvZ8/hKpDzieETXMv1+HU0dpGuPmyyhkH9BqXczKStor3TwuNMpa96yqUydchU0QIoD+wXCdg3iujLRcPgSSawMduZumjZl9u6aMp8NE31lfOI5ho4Xq+sdYZlMHs2CRETyVTQzKrcqpkzjDAru7zyC13r/EYdDho8Jo/sdbNs3vmhF/GtraLxRqNi2tDtoXjQ6jnWOvhKTnYuInF05gR9UsP/P75o1dcbG0ISgXLImSZ1wGeJGWxnEJMpIREQurR2DeLyKRgu9tjUzGi3guAo6DhOQrjXWGDZafZynwsAaeKQz2M8ajRrEFYfRydTEBMRJxs7n2sSh08Vzd9rWGCpK4ZiNVMJ5P2tdFGpNNM04f3bTlBmbw3GRKuCYSBxJ0+MAx2iji+3t9m3/0d85COxxQ3WtLijjsC2HCYiv7lG9ie33EzQ7EhHpdPE8p05bM7St+nAbE73u6EGIq0XbT/dPjUBcinCuGE3btT5IY9/olOy8FbZwDe611VrjSC4vygSsmFWGiL5tf3NtEeNF23/+/GuPQ/zh//VpiNdWrKGj9lOJ1e8fscMgxk+wPyXiMGXJ4JqaVWZL2ay9lunpHeoDNSc59raxaIM1hwOLwwBm2CiNKvPLXNWUaUfq3qYwTnt2fink1PzY2jJlWspM8cy5sxBvbNi+GppnA09FDjOgRNexY0uX0fG2zIzU+EwcVdLKrCg2BkIiiRpcsf6Onm1/oAxWI2W05fBIEl/teV1tsQZHV4e/hBJCCCGEEEIIGRh8CCWEEEIIIYQQMjD4EEoIIYQQQgghZGBsWxNqkt27MjWH+A7/aBpfLH7FTpv4e72BSWn7y1dMmUDpIbIq2XbX9c6zSsbqx9i2yJGQ24uwvaHjuP2Mflka3632HInWo5R6B169cB2FVieSKG1pPrLahkRpspbyNYiDnH33PlayxIzSn7TbVueVVe+LTzk0fPm0PdcwEfXxvkYO7W86rXQBadR9VUasrjfq1CC+fOG4KXPq2Gk8Tv4GiLvjmLRZRKSj+sZEARN0+7Ft/9TYIYhzhZIp0wuwL4xOViEOQtt/Gg1MVr1jATWtXmTb8uDnMOF5pmj1QNO78J5kU9i5lxatNqkfrUO80USt6Xhe6YVEZLSMOq8w7dBaO5JIDxsNpR3MZuyYz6VxPslm8Z74nkNLrT7r921/aLdRDxTo+dshRdEfBSqZfCpv72OthhrQT3/mz0yZkYk3Q7xnH3odROLQbioNTruDGjN9bUVEQrUuZBz6Nj/Gz64sY//uO9ajdC79bctEDn2q7t+LFxZNmfV1+x2GiR975V6Isznb6c5fwTnn4Qe/BPGRabsGeGoc9T173OdPoJb9wEGcq32xe4ja5echbm2izm7pCnpViIiceh7rXFxbN2XCIq7/4zvwuiQp630QaT25Gno9h748bDcgLpi9l4ivdJjdNu4Vo7zdcxbG0NNCa7hDhyY0EfzMpfmLInsPho3RSbz3F640TBk9BiJ1rfode526Hbz/tZZdA7wMzls9tQY4rGEknVY6RrXHjx3rtvnIu/rafjWNqIiI7jJppZWNE3ueRD2iaQ20iEgSYb2UOlEc2f4cRrq9Skea2LVRr9Oe67p4L1wXzV9CCSGEEEIIIYQMDD6EEkIIIYQQQggZGHwIJYQQQgghhBAyMLatCc0qfVgqXzRl+jXUhGjd5XzV1rllC9/9Pl5bNmWWFi9AXO9gPqCm473ursqblVEvjIeOnE5+gpej5Xjvv63enU7rfFc9xzvmPfyOnk7C43iZvZtW77s7dKMtVa+bU1oe337HvHqnPI7wXfxSbPVAB2YwL95Y1ra3vV6D2GaYvL7JZFA3EjTbpkw6izrpboRayMXlp0yd5x55GuJKyubSLQWYx+z4F56AOLfH9tN1pVkt7q9CvGfBjsVLy3jvtY5HRCSdRf3SzC6ty7C6sLiNdYo+9sGzJ06ZOg9/7RLECzfZqSquqDEeYr7JsG41i+NTeJxzZ1ED9dwWatRFRN74Pa+BeHbB6rpaodVODRsFpTHP5+31zaoclPkxzLuac2jHOyo39FbN5ojrdHC8lZVO15W3WutI9Z9cS6N2DLzilbdDfO6i7Zsf+LUPQfy6194F8Q1Hd5o6ozPY55ME54p0yuZP9ZQOLXSMx9WtGsSnnz+HBRx/Zo6UNjaKcf7o9K0+r1BWY61hx2OrY+sNEx21P9hw6NaeUxq5h449C/Elh7Z9oozzyWjG3ucRlbO5UMFxdekKrjUiIqfO45z06BOP4f9fsrreRle1L201aA+84iaI33zjPogdUmvJK2345RXUo15ase2vN9FT4eQzx0yZE48+DLHWv2XnMLeriEisNKtRW835rpylSrfr1oQOf57QnuqalxatrvjSEmpC+3p/q/Opi53biiXrR5EOVd7nQOkaHftonRNZyy5dmlCbWdS213fl5YXjXl0T6ukzOXSkuk+lfNs3PdWWrGpvkrp6LlR9HeLI8RyjvAJ8h4bVTzFPKCGEEEIIIYSQ72L4EEoIIYQQQgghZGDwIZQQQgghhBBCyMDgQyghhBBCCCGEkIGxbWMiUYJYz7OJs9PKr6Pro5lLxmFos2sOzSHOXrLmBv2eSkAcq8S2oa2zphKrVlKq/c5ksijg3XLkYl3qo1DY9/A5PpVYEbBGP/lnxIqNl2O8dltiRe9N1b4dyvCoqhO6i0hqA40TZtJoiHHHTkxGLCKyfyfe2GLHms/0lMHRsBkTbQYXIe73OqZMS/mgLNfQdGhx80FTZ22pBvFs5ogpM6GMEuodrJNZQpMWEZGsSgh9KToJ8eEHdps66zEed3PRTg9Tc9injr5SGdGUrMHK2touiFdX0QiiVLa95cYbFyAeWbBGUEmE9yAKsL1Ll3HeEBFpbWCZvjINqzWtKc7lGzHheakybcpcWbOmU8NGRs1BfmTn3XwK54pEtHmEw/BAJc7O5WwfyipDrIIyyms07JwURdhn8kU8bijWAGb/YRwXh26ZMWU+/TEcxx//6EMQv7GF5kYiIne+Ho8b+9gPQ8dc7am1RScUFxFZWUHzmUYT+/PO3Tj2vlkG14ClFTQSSft23I9O4Gd+xo6BZsuOt2Hiq4ubEPe61sTvyjJe26Lyvtpo4/+LiJxdQnOX+Yo1p/uht6E52k233ApxtmDn0Ik5NMiavuEwxN/jMLqaHkfDo2rB0RcK+KVyeRxXpbwdvxllntLs4bXbaNu55EoN+/IXpyZNmY4ygFlcx/GQOIxS2htoyBSpYVUo2uufmP3v1c1ehpGO2uQEQWDK6D1xFOh7a9eAdErvo+21TKuPsoL3IM5ZE61+qOdVfd8c90x95LjV4qu9tmNZu2odT12HlGOP76vG+JE1Q0up4xbSOGbTaYeZkdpThuo+hg5jIhF9r22ZlMME6Wrwl1BCCCGEEEIIIQODD6GEEEIIIYQQQgYGH0IJIYQQQgghhAyM7WtCVYLZXsdqtLQe0lPvKid9+/54WSWlnRyx2oCNVdRMNJSGYitln6UfVprKMfWe94hD01pSL38Hvn1fvB7iZ131HrfrjeiUTiar9KlFdy2I0p59/7qo2hcHqPHoa7GDiBRUe0fLShcS1E2d5iaeuz5ir50X4vW26o3rm83mFYhb9SVTJuqgJqrWfB7iuGt1pKNFvIftrdOmTGkc+4JfRg1oJm81LCMBanv8GdTxjE1Z3c7IKPaXCydqpoyn+uXGspoXQpt0fGYW9Z0XL+Pcsb5mtWRJBueBadtcyeXUfKPGb69nx8yVk9i/Sxk88KHb9po6TaUTXdu080ImN/yJysN+V8UO3Y6SnxSLqBHNqKTvIiIppUHMOspovZXW48V9h54mwnkq7GGZILCavo1N1JTd+9obTZm7X30nxF998BmIz56/ZOrMXkS9Uq6MY3Z0dNzU6SstVb1ux0mjiWPp4E37Ia5WrcZ/ZAxvUm0Lx4QrIfqugzsg7rbtmtvuD7cmdHMDNaGhlVSKF+E6mPWwL/d9q1ubHce+vXDgNlNm362vhLhSRQ2o79v7MVLG+XBmAjWhWZfWTSWg9xyaOU/tVyKt34v+/+2dW3McVxWFd19npkcz0uhiSVbiWLapFE6CqUqowAOBH8DP5YkqeOINCh5ChQSMC2zLti7WzXPrO8977U2kpIquytT63k7rdPeZc+tz1L3WtuOqqPR1Q9CkZaldU+yu63nh888+M3l6axsq/ds//F6ln7/6jzmnbvRzuIJnQBg5fiei2zF0xoinE101lqAnrxZ2TRPUqHXU/aOu7cBBjWLrzM0x7Cdw2dw6XgJVq69TwKBt3bW3pvZ8DKDP30YOjJr+Bu7tvRHMYn3vLLHlHWd6Tsky7M+2r8agG8X5o23tb8bujTpeEZEk/e7vNfkmlBBCCCGEEEJIZ3ATSgghhBBCCCGkM7gJJYQQQgghhBDSGbfWhNYNxntztALwjXAa6+/o24XVhKLk4M7Q6oH+8uXfVPrtKx3XrArszziF762vIZZo5sTByeCb557zzXObojZA5/F0AXGsNQY1fG99Xdt6qSC+kfeNtvn8GjShjVP+EIItNRD753J6ac6JWn3dXmhjkgXN7eXFP0QW77QGNIhOTZ5kpDVz69Ch8mcQNE5ERju6/svtc5MnSLRe7O7mxyr98sjqU6/+qXWMjw8eq/Tamh2/77+nx8jbV7Ysz77S5y2utd4gyqxWPB1o3cjuXf173ry0OtK8AX2ZF9cX4lSNN7Q24vDhxJxz+lTHe61KrZ+4PrdalDevtWYury9Nnq3tDXNs1ZjNoa9Wdt4qKz3nFIUeA9nAtmNdg57TiYcZRXp+qUEDWjrPlvlUz1vHR1rvuevEHZysb+hrONqkDz7ZUemLpU6nsZ13pyC1L0NdtnRgdVI1+A/EPTt/7B5ovfX9B3oMFE4sSAjjJ0Wpx/DVtY2VO1zT2t5B39EDZ1ZLt0rsr2v/ihL7rYiUwYZK94Y6/dx2J0nXdT/85RefmjybEDu0BI1l094cRxz75cgutQyxMxZDjOlotHrOu40G1jMN+IV4ojo4tDG2644PH2oN/1ff7Kv00ZHVhFZQFtRAe/F4sSxevOPVjxIq0lR6jbPp+IPEoGPMYQpqG9vxEtDhprG9bgrtVDc6z5Uj0u4nEI+5r9u2KGw7ViWskZ2QmagTxf6LumkRkQhi1qYx+LM4MdZ3IW7vuhO3t5+CZ0h8854En6e4R/HOCcCDJnK0ppGz57gJvgklhBBCCCGEENIZ3IQSQgghhBBCCOkMbkIJIYQQQgghhHQGN6GEEEIIIYQQQjrj1m4yYaKFq4mjwg7gWADiV3GE/PVsqtL7I2u+sJXo85KlNjoZN1ZEuwRxfAjpKrZq4xmIjRee0hxMhKLqZkFyCKZIKGJuAycwLKSTwIqAE6jfAfzGNedfDMMA6tI0iW2jfKFNYqDJREQkC227rRKL869VOupZh4kc2jEdaaH5/kd3zTllqeu76tlGa67GKn19os1/ppfWDGjxWo+RL//0D5XeGtuhHyba/OLnv7Ztev9wV6U3d3Q9jO/YYOyDLQieHO6p9NmRNpcQETk5f6rSTe+5ySMlmBeA4UGaWQOEAIo3WgODj0YH4xYRmYLBTRU6Bgj9gTm2alxe2cDkSF3ruW6+0P07aGzd5TCfo2mCiEivr/tQmuqGnM61YYaISAlz82hTG5v84lfWAObefW1sEia2vKNNbVDz059p068steNmPNZjOBf4zaH9zQEYTPRC+wxAN5RloeuhLK1hU3+g++popOsl7dkxHKW6fEVu5z/vvFXiwbZuw7opTJ5LWFfMwejqRxNrlvbw0ycqfXBwz+QpoB2jCIx9bHHNwQbNJVsniD2aDjnvKQI0IhK87s0mQ0jjuL9geXuxLe840/PCo3u67v717Jk55+W5dglrY3g+BdYUB41aQlMHvlnnqhGAkeXOpn3G7mzp+mvACCoUZ35x5j8E+wimx3M7HpOenqux3fKlXe8WMLWhCZGIs4aHdOjM1Wmix9Ig1XW5ltl6yQb6WeIZ/0RgjhrC3ODVbRhiH9fXaL0Ba27tGLd+jzHAN6GEEEIIIYQQQjqDm1BCCCGEEEIIIZ3BTSghhBBCCCGEkM64vSY01lmj1tm/tvDttNGEOoFt4RvttcB+1/0FaOmu4Nvvvz63we7PIELuEr5Vzh3tZgPlbZw9eg3XCUEI68R4lTD89u+kIye4cwynDJzvujP4rnsU65uPQvst+xZcJoMCJ2I1UCmUv61tnuXyZr3YD5k9CBI879mGjkVrS1rQdKUTW0fFhdZjzU/svS/+/lZfZ6q1m+N8y5xTgf4gb/WYaWqrW7s41nqyd6Udiw8OdWD1vNR94fyFLquISDjVP6oPYuXDQ62JEhHZPdC6tYul1Uucnmr9ZlPo+o9S20ZPPr+v89QX+hri6Gsr3W6B2KDSGMh5FWlE638SJ6C4wJw0nem6q1FwIyKzqdacR7GdDycbEeSBNnD0iP1Ml2UPdI3DbStuH4z0vevGmZsbfa94ou8zBB2SiEgCz89yoeshrG1frUAvfv3uyuTJoT5RRxqn9rmBj+leH35PYtt1Nofyhra+p++sLneV2B7pOaksbN1O53o+zD7WuuP3QVcqIvLhgx2VTp11R5joeyXQXRJHLowSSvSriNHEQ0RQ6uivZ0CDBid5urAWvCZaWEKUeEBEWrhuJPZHDge6H/7kkx+rdO5o2373xz+r9MmV7reh86PtGs3mQd3oSgLax9iZq/FYkui5Ook87Tj0IUdXXIOnTFHoPuNpH0djvc5pYB0UOH1K4FgQWt1oYMZOAH93vGFQV2yuaUuC1wmcvQLmiSI9f0eOPhU1oUEQw9+d/o3j3HuH2X73McA3oYQQQgghhBBCOoObUEIIIYQQQgghncFNKCGEEEIIIYSQzuAmlBBCCCGEEEJIZ9zamEhSNOOwQvIAxcRgxlBVNnB2A0XwTG/2wUPlN08OVHo3sQY8T491QOLjmb73RWUFtMtGC3hzx2ukCnT52gADxVoRcATH8M6JI+SHmNcy9AK4w717AQTvjaygegLmRUMIfttP7H3Q4MALgD4P7L1Wie1KBxnP963BxMnLS0gfq3SVWVOWuFhX6fDI1mP/HMYEmoJUtizDR3rQbD3UfSyC+4qIyMmlSr55dmyy1BfauOfOIZS/sf1/kO+r9PmVNqJJ6ufmnK3dXZXe23xsy7I8UukXR7q8gzVrvjTZ0XVXLfW8FqPjh4jIGZiaXdk2Kpd23lo1ilLXQ+XMA4uFPjab6f7SS2xw8ygeQtreuw1gbq50G+S1fQaUhe5naI7SG9sbVYE2KSmcYOZ1ru+Vz/S4LiInaDqYOJ2da7OuzcmGOaeB5+nZ61OTZ1noe23v7+myOm4X59cXcATM9pwGeP0KDLycZ1bdrPYzoK10Oy9zO58PwBDuo0f3VPruxJqaDcD4BIPNi4hEaIQCydAxcsFT0BjFrNdEpIUmbBzDNTSNqWow86qd+bHW58wKPYamS1uXCxhndWv75QLmgRpMWfbf+8CcszX5t0q/vX6h0qauRSQAN6/ANWBZfWOiAEypcG0rIpKmug36fZ2OI2t8hqZZTWPnc+xXLeTJEm0cJiKSwFiq4BqBY94JS+L/YdKjM2H53a6AQxjSvgmYrl/PNEvQrAjP8YyJgm/Pg+ZjIiIRzkuOOW3wPd5r8k0oIYQQQgghhJDO4CaUEEIIIYQQQkhncBNKCCGEEEIIIaQzgtaLCksIIYQQQgghhPwf4JtQQgghhBBCCCGdwU0oIYQQQgghhJDO4CaUEEIIIYQQQkhncBNKCCGEEEIIIaQzuAklhBBCCCGEENIZ3IQSQgghhBBCCOkMbkIJIYQQQgghhHQGN6GEEEIIIYQQQjqDm1BCCCGEEEIIIZ3xX/n5ABDI19B2AAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Print the corresponding labels of the displayed images from the target variable (Y_train):"
      ],
      "metadata": {
        "id": "FAQkUWlmm-bc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "classes = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']\n",
        "fig = plt.figure(figsize=(12, 4))\n",
        "columns = 5\n",
        "rows = 2\n",
        "for i in range(1, columns*rows +1):\n",
        "    fig.add_subplot(rows, columns, i)\n",
        "    plt.imshow(X_train[i-1])\n",
        "    plt.title(classes[Y_train[i-1][0]])\n",
        "    plt.axis('off')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "AkOrWzghnJ78",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 254
        },
        "outputId": "d320e79a-75ed-4cf7-b806-ebc98616a61f"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x400 with 10 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 1.2. Exercise\n",
        "We will train a Multi-Layer Perceptron (MLP), which requires a 2 dimensional input: 0th axis refers to the datapoints (i.e. images), the 1th dimens to the input. As images are 3 dimensional (width, height, color channels), you have to reshape the images into vectors. We also call this flattening.\n",
        "\n",
        "In order to do so, calculate the size of the equivalent 1D vector of the image:"
      ],
      "metadata": {
        "id": "VX24g5FstsRU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#print(X_train[0].shape)\n",
        "flattened_dim = (X_train[0].shape)[0] * (X_train[0].shape)[1] * (X_train[0].shape)[2]\n",
        "print(flattened_dim)"
      ],
      "metadata": {
        "id": "hdoMyxHzuXZG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f5f2abad-733c-441d-d0f1-835562265b05"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3072\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "After you calculated it, we can reshape the images, and covert the integer arrays into float arrays -- which are needed for the neural networks as input. Hint:\n",
        "* in the [reshape() function of Numpy](https://www.w3schools.com/python/numpy/numpy_array_reshape.asp) you can use -1 for one axis, to automatically calculate that value."
      ],
      "metadata": {
        "id": "WbqXJUSFubeC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# reshape 3D tensors to 2D tensors\n",
        "X_train = X_train.reshape(X_train.shape[0], -1)\n",
        "X_test = X_test.reshape(X_test.shape[0], -1)\n",
        "\n",
        "# it is in int8 format, the neural network requires float32\n",
        "X_train = X_train.astype('float32')\n",
        "X_test = X_test.astype('float32')"
      ],
      "metadata": {
        "id": "vukOcBM0XzSj"
      },
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 1.3. Exercise\n",
        "As the next step, let's split the training data into training and validation data. 80% of the original training data should be the final training data, and 20% the validation.\n",
        "You should use Numpy indexing to select the first 80% of X_train as final X_train, and the last 20% as X_valid. Hints:\n",
        "* https://datascienceparichay.com/article/numpy-array-first-n-rows/\n",
        "* https://datascienceparichay.com/article/numpy-array-last-n-rows/"
      ],
      "metadata": {
        "id": "DO79AdIdvVfD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_ratio  = 0.8\n",
        "train_length = len(X_train) # length of the training data\n",
        "train_split  = int(train_ratio * train_length) # where to split the training and validation data\n",
        "X_valid, Y_valid = X_train[train_split:], Y_train[train_split:]\n",
        "X_train, Y_train = X_train[:train_split], Y_train[:train_split]"
      ],
      "metadata": {
        "id": "mRwuWxxIxLgN"
      },
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 1.4. Exercise\n",
        "As the last step of input data preparation, the data should be standardized. Calculate the mean and variance of the training data (elementvise -- so for each value of the flattened image you should get a mean and variance for the training data along 0th axis). Hint:\n",
        "* https://stackoverflow.com/questions/70626231/how-to-calculate-mean-variance-standard-deviation-per-index-of-array"
      ],
      "metadata": {
        "id": "z05y_QWDxWER"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mean = np.mean(X_train, axis=0)\n",
        "std = np.var(X_train, axis=0)\n",
        "std = np.sqrt(std)\n"
      ],
      "metadata": {
        "id": "TSZbvWCBx8Ea"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Next, use the resulting values to standardize the training, validation and test data by substracting the mean and dividing the result with the standard deviation."
      ],
      "metadata": {
        "id": "6WRHKkkjyN1S"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X_train = (X_train - mean) / std\n",
        "X_valid = (X_valid - mean) / std\n",
        "X_test  = (X_test - mean) / std"
      ],
      "metadata": {
        "id": "2ESLP1EIyB2J"
      },
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 1.5. Exercise\n",
        "And as the last step, convert the dense representation of the classes (i.e. 0,1,2,3...9) to one-hot encoding (0 = [1 0 0 0 0 0 0 0 0 0], 1 = [0 1 0 0 0 0 0 0 0 0] ... 9 = [0 0 0 0 0 0 0 0 0 1]). To do this, first, calculate the number of unique elements in the target training data. Hints:\n",
        "* use the [unique() function](https://numpy.org/doc/stable/reference/generated/numpy.unique.html) of Numpy to list the unique elements\n",
        "* you can count the number of elements in a list with the [len() function](https://www.w3schools.com/python/ref_func_len.asp)"
      ],
      "metadata": {
        "id": "ooHCnUin7r4o"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "nb_classes = len(np.unique(Y_train))\n"
      ],
      "metadata": {
        "id": "i0LAO9cs8KEE"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Doublecheck, if the same number of classes exists in the validation and test target data:"
      ],
      "metadata": {
        "id": "BvM6XhGe8JU9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Validation data has the same number of classes, as the training data:\", nb_classes == len(np.unique(Y_valid)))\n",
        "print(\"Test data has the same number of classes, as the training data:\", nb_classes == len(np.unique(Y_test)))"
      ],
      "metadata": {
        "id": "eZFNSsyx_Py2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a5d927c5-1222-4e23-856b-018a39a08330"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation data has the same number of classes, as the training data: True\n",
            "Test data has the same number of classes, as the training data: True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "And convert the dense representation into one-hot encoding. Hint:\n",
        "* use the [to_categorical function](https://www.tensorflow.org/api_docs/python/tf/keras/utils/to_categorical) with the calculated nb_classes\n"
      ],
      "metadata": {
        "id": "mJM-iBmR8dLe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Y_train = to_categorical(Y_train,num_classes=nb_classes)\n",
        "Y_valid = to_categorical(Y_valid,num_classes=nb_classes)\n",
        "Y_test  = to_categorical(Y_test,num_classes=nb_classes)"
      ],
      "metadata": {
        "id": "xwZ4OJ6I8lba"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Final check of data preparation\n",
        "Now, lets check the shapes and mean and standard deviation of the training, validation and test data."
      ],
      "metadata": {
        "id": "LshN2OSsv3TZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Shapes of the training, validation and test input data:\", X_train.shape, X_valid.shape, X_test.shape)\n",
        "print(\"Shapes of the training, validation and test output data:\", Y_train.shape, Y_valid.shape, Y_test.shape)\n",
        "print(\"Mean values of the training, validation and test input data:\", X_train.mean(), X_valid.mean(), X_test.mean())\n",
        "print(\"Standard deviation of the training, validation and test input data:\", X_train.std(), X_valid.std(), X_test.std())"
      ],
      "metadata": {
        "id": "O_jdJVcvX0vi",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "63688bcb-4b6a-4824-81d2-22959f71ec81"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shapes of the training, validation and test input data: (40000, 3072) (10000, 3072) (10000, 3072)\n",
            "Shapes of the training, validation and test output data: (40000, 10) (10000, 10) (10000, 10)\n",
            "Mean values of the training, validation and test input data: -2.4725992e-09 0.0023437182 0.013331188\n",
            "Standard deviation of the training, validation and test input data: 1.0000038 0.99656224 0.9978297\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Don't worry, if the mean and standard deviation of the validation and test data are not exactly 0 and 1, but these might be very mear to it (e.g. 0.01 mean, 0.99 variance)."
      ],
      "metadata": {
        "id": "5GtAOOoezmZY"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cJ14oyZExpqj"
      },
      "source": [
        "# 2. Training"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "s4ZXYRMBxpql"
      },
      "source": [
        "Let us begin with a simple example of creating a small neural network without regularization and training it with actual data. The purpose of this is to provide you with an example as to how to proceed with the next exercise."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# imports\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Embedding, Flatten, Dropout\n",
        "from tensorflow.keras.initializers import HeNormal\n",
        "from tensorflow.keras.callbacks import EarlyStopping"
      ],
      "metadata": {
        "id": "6-8Q6ll7ZDgq"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# model definition\n",
        "model = Sequential()\n",
        "model.add(Dense(128, activation='tanh', input_shape=(flattened_dim,)))\n",
        "model.add(Dense(128, activation='tanh'))\n",
        "model.add(Dense(nb_classes, activation='softmax'))\n",
        "\n",
        "# loss function and optimizer\n",
        "model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "pke6w3CD8DHp"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CZbOR76QxprC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2ec2ccb6-6350-4abb-90c2-d3966bfddac6"
      },
      "source": [
        "# training\n",
        "network_history = model.fit(X_train, Y_train,\n",
        "                            validation_data=(X_valid,Y_valid),\n",
        "                            batch_size=128,\n",
        "                            epochs=40,\n",
        "                            verbose=1)"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/40\n",
            "313/313 [==============================] - 4s 12ms/step - loss: 1.8153 - accuracy: 0.3624 - val_loss: 1.7647 - val_accuracy: 0.3909\n",
            "Epoch 2/40\n",
            "313/313 [==============================] - 4s 12ms/step - loss: 1.6921 - accuracy: 0.4092 - val_loss: 1.7264 - val_accuracy: 0.4011\n",
            "Epoch 3/40\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.6342 - accuracy: 0.4332 - val_loss: 1.7111 - val_accuracy: 0.4050\n",
            "Epoch 4/40\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.5984 - accuracy: 0.4478 - val_loss: 1.6784 - val_accuracy: 0.4198\n",
            "Epoch 5/40\n",
            "313/313 [==============================] - 4s 13ms/step - loss: 1.5634 - accuracy: 0.4587 - val_loss: 1.6784 - val_accuracy: 0.4200\n",
            "Epoch 6/40\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.5367 - accuracy: 0.4672 - val_loss: 1.6686 - val_accuracy: 0.4279\n",
            "Epoch 7/40\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.5062 - accuracy: 0.4813 - val_loss: 1.6507 - val_accuracy: 0.4326\n",
            "Epoch 8/40\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.4757 - accuracy: 0.4918 - val_loss: 1.6445 - val_accuracy: 0.4330\n",
            "Epoch 9/40\n",
            "313/313 [==============================] - 4s 13ms/step - loss: 1.4499 - accuracy: 0.5015 - val_loss: 1.6454 - val_accuracy: 0.4323\n",
            "Epoch 10/40\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.4285 - accuracy: 0.5031 - val_loss: 1.6424 - val_accuracy: 0.4328\n",
            "Epoch 11/40\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.4100 - accuracy: 0.5137 - val_loss: 1.6294 - val_accuracy: 0.4426\n",
            "Epoch 12/40\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.3833 - accuracy: 0.5216 - val_loss: 1.6151 - val_accuracy: 0.4435\n",
            "Epoch 13/40\n",
            "313/313 [==============================] - 4s 13ms/step - loss: 1.3577 - accuracy: 0.5276 - val_loss: 1.6265 - val_accuracy: 0.4426\n",
            "Epoch 14/40\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.3409 - accuracy: 0.5369 - val_loss: 1.6260 - val_accuracy: 0.4444\n",
            "Epoch 15/40\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.3248 - accuracy: 0.5415 - val_loss: 1.6288 - val_accuracy: 0.4432\n",
            "Epoch 16/40\n",
            "313/313 [==============================] - 4s 11ms/step - loss: 1.2995 - accuracy: 0.5485 - val_loss: 1.6174 - val_accuracy: 0.4539\n",
            "Epoch 17/40\n",
            "313/313 [==============================] - 4s 12ms/step - loss: 1.2929 - accuracy: 0.5512 - val_loss: 1.6115 - val_accuracy: 0.4506\n",
            "Epoch 18/40\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.2627 - accuracy: 0.5623 - val_loss: 1.6268 - val_accuracy: 0.4531\n",
            "Epoch 19/40\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.2390 - accuracy: 0.5689 - val_loss: 1.6305 - val_accuracy: 0.4529\n",
            "Epoch 20/40\n",
            "313/313 [==============================] - 4s 13ms/step - loss: 1.2143 - accuracy: 0.5776 - val_loss: 1.6351 - val_accuracy: 0.4466\n",
            "Epoch 21/40\n",
            "313/313 [==============================] - 4s 12ms/step - loss: 1.2026 - accuracy: 0.5829 - val_loss: 1.6376 - val_accuracy: 0.4532\n",
            "Epoch 22/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 1.1786 - accuracy: 0.5903 - val_loss: 1.6491 - val_accuracy: 0.4525\n",
            "Epoch 23/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 1.1607 - accuracy: 0.5974 - val_loss: 1.6560 - val_accuracy: 0.4508\n",
            "Epoch 24/40\n",
            "313/313 [==============================] - 4s 13ms/step - loss: 1.1427 - accuracy: 0.6020 - val_loss: 1.6638 - val_accuracy: 0.4466\n",
            "Epoch 25/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 1.1273 - accuracy: 0.6090 - val_loss: 1.6702 - val_accuracy: 0.4460\n",
            "Epoch 26/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 1.1063 - accuracy: 0.6172 - val_loss: 1.6720 - val_accuracy: 0.4484\n",
            "Epoch 27/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 1.0906 - accuracy: 0.6213 - val_loss: 1.6770 - val_accuracy: 0.4518\n",
            "Epoch 28/40\n",
            "313/313 [==============================] - 4s 13ms/step - loss: 1.0701 - accuracy: 0.6302 - val_loss: 1.6858 - val_accuracy: 0.4474\n",
            "Epoch 29/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 1.0640 - accuracy: 0.6298 - val_loss: 1.6923 - val_accuracy: 0.4473\n",
            "Epoch 30/40\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.0412 - accuracy: 0.6394 - val_loss: 1.7214 - val_accuracy: 0.4435\n",
            "Epoch 31/40\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.0193 - accuracy: 0.6481 - val_loss: 1.7252 - val_accuracy: 0.4488\n",
            "Epoch 32/40\n",
            "313/313 [==============================] - 4s 13ms/step - loss: 1.0068 - accuracy: 0.6521 - val_loss: 1.7273 - val_accuracy: 0.4472\n",
            "Epoch 33/40\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 0.9890 - accuracy: 0.6572 - val_loss: 1.7426 - val_accuracy: 0.4494\n",
            "Epoch 34/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 0.9805 - accuracy: 0.6600 - val_loss: 1.7576 - val_accuracy: 0.4442\n",
            "Epoch 35/40\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 0.9660 - accuracy: 0.6679 - val_loss: 1.7561 - val_accuracy: 0.4464\n",
            "Epoch 36/40\n",
            "313/313 [==============================] - 4s 13ms/step - loss: 0.9480 - accuracy: 0.6744 - val_loss: 1.7786 - val_accuracy: 0.4439\n",
            "Epoch 37/40\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 0.9305 - accuracy: 0.6785 - val_loss: 1.7929 - val_accuracy: 0.4477\n",
            "Epoch 38/40\n",
            "313/313 [==============================] - 3s 11ms/step - loss: 0.9238 - accuracy: 0.6817 - val_loss: 1.7914 - val_accuracy: 0.4514\n",
            "Epoch 39/40\n",
            "313/313 [==============================] - 4s 14ms/step - loss: 0.9075 - accuracy: 0.6870 - val_loss: 1.8113 - val_accuracy: 0.4448\n",
            "Epoch 40/40\n",
            "313/313 [==============================] - 4s 12ms/step - loss: 0.8867 - accuracy: 0.6940 - val_loss: 1.8264 - val_accuracy: 0.4464\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uFqhzV85xprJ"
      },
      "source": [
        "Let's plot the training and validation loss and accuracy curves:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BYmXGkLCxprK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 881
        },
        "outputId": "0ed9ecaf-7b8f-42c5-a700-fc84846b4c79"
      },
      "source": [
        "def plot_history(network_history):\n",
        "    plt.figure()\n",
        "    plt.xlabel('Epochs')\n",
        "    plt.ylabel('Loss')\n",
        "    plt.plot(network_history.history['loss'])\n",
        "    plt.plot(network_history.history['val_loss'])\n",
        "    plt.legend(['Training', 'Validation'])\n",
        "\n",
        "    plt.figure()\n",
        "    plt.xlabel('Epochs')\n",
        "    plt.ylabel('Accuracy')\n",
        "    plt.plot(network_history.history['accuracy'])\n",
        "    plt.plot(network_history.history['val_accuracy'])\n",
        "    plt.legend(['Training', 'Validation'], loc='lower right')\n",
        "    plt.show()\n",
        "\n",
        "plot_history(network_history)"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "What do you think? Does it overfit?"
      ],
      "metadata": {
        "id": "tgG7QeXF-dx6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Yes I believe that the model does overfit. The top graph shows how the training loss decreases to a very low level as the epochs progress, but the validation loss does not -- in fact it starts to increase again after around 20 epochs. Similarly, the validation accuracy does not improve even as the training accuracy does."
      ],
      "metadata": {
        "id": "EbEb0SYgbacR"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_Q9rIeBBxprO"
      },
      "source": [
        "# Inspecting the model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6r2AmmoMxprP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ffcefed1-06dc-4515-b069-70ba14d9adb1"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense (Dense)               (None, 128)               393344    \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 128)               16512     \n",
            "                                                                 \n",
            " dense_2 (Dense)             (None, 10)                1290      \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 411146 (1.57 MB)\n",
            "Trainable params: 411146 (1.57 MB)\n",
            "Non-trainable params: 0 (0.00 Byte)\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "D3-bVDVuxprS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f4bd59a3-829a-4134-cd68-ab10fb6db39c"
      },
      "source": [
        "print('Input: ', model.input)"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Input:  KerasTensor(type_spec=TensorSpec(shape=(None, 3072), dtype=tf.float32, name='dense_input'), name='dense_input', description=\"created by layer 'dense_input'\")\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Da2OJ3DmxprX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5d4c7cc2-1d18-4341-ef56-eba9aa7f47af"
      },
      "source": [
        "print('Layers:\\n')\n",
        "for layer in model.layers:\n",
        "    print(\"Layer's name: \", layer.name, ', trainable: ', layer.trainable)\n",
        "    print(layer.get_config(),'\\n')"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Layers:\n",
            "\n",
            "Layer's name:  dense , trainable:  True\n",
            "{'name': 'dense', 'trainable': True, 'dtype': 'float32', 'batch_input_shape': (None, 3072), 'units': 128, 'activation': 'tanh', 'use_bias': True, 'kernel_initializer': {'module': 'keras.initializers', 'class_name': 'GlorotUniform', 'config': {'seed': None}, 'registered_name': None}, 'bias_initializer': {'module': 'keras.initializers', 'class_name': 'Zeros', 'config': {}, 'registered_name': None}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None} \n",
            "\n",
            "Layer's name:  dense_1 , trainable:  True\n",
            "{'name': 'dense_1', 'trainable': True, 'dtype': 'float32', 'units': 128, 'activation': 'tanh', 'use_bias': True, 'kernel_initializer': {'module': 'keras.initializers', 'class_name': 'GlorotUniform', 'config': {'seed': None}, 'registered_name': None}, 'bias_initializer': {'module': 'keras.initializers', 'class_name': 'Zeros', 'config': {}, 'registered_name': None}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None} \n",
            "\n",
            "Layer's name:  dense_2 , trainable:  True\n",
            "{'name': 'dense_2', 'trainable': True, 'dtype': 'float32', 'units': 10, 'activation': 'softmax', 'use_bias': True, 'kernel_initializer': {'module': 'keras.initializers', 'class_name': 'GlorotUniform', 'config': {'seed': None}, 'registered_name': None}, 'bias_initializer': {'module': 'keras.initializers', 'class_name': 'Zeros', 'config': {}, 'registered_name': None}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None} \n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AtVX3M3lxprc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "43a8f122-9f45-4480-a991-fe4bcbfcecc7"
      },
      "source": [
        "print('Output: ', model.output)"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Output:  KerasTensor(type_spec=TensorSpec(shape=(None, 10), dtype=tf.float32, name=None), name='dense_2/Softmax:0', description=\"created by layer 'dense_2'\")\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 2.1. Exercise\n",
        "Introduce [early stopping](https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/EarlyStopping) and [dropout](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dropout) with a rate between 0.1..0.5. Tips:\n",
        "\n",
        "* Insert the dropout layer between the two Dense layers.\n",
        "* Set the patience of early stopping to 5.\n",
        "* Set the number of epochs to a very high number.\n",
        "* Don't forget to restore best weights after early stopping.\n",
        "* And also set early stopping to monitor validation accuracy (the default value is validation loss -- which is categorical crossentropy now).\n",
        "\n",
        "Compile and train the model. Attempt to increase the validation accuracy as much as possible by making changes to the dropout rate. Inspect the effects of the modifications."
      ],
      "metadata": {
        "id": "E-hHfs9qA_iO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "es = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)"
      ],
      "metadata": {
        "id": "NwXrPzOgEBG-"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# model definition with dropout\n",
        "model = Sequential()\n",
        "model.add(Dense(128, activation='tanh', input_shape=(flattened_dim,)))\n",
        "model.add(Dropout(0.3))\n",
        "model.add(Dense(128, activation='tanh'))\n",
        "model.add(Dense(nb_classes, activation='softmax'))\n",
        "\n",
        "# loss function and optimizer\n",
        "model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "7hZEGzj8GFwP"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# training with early stopping\n",
        "network_history = model.fit(X_train, Y_train,\n",
        "                            validation_data=(X_valid,Y_valid),\n",
        "                            batch_size=128,\n",
        "                            epochs=100,\n",
        "                            verbose=1,\n",
        "                            callbacks=[es])"
      ],
      "metadata": {
        "id": "GCG54R-vGGWj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "db7810d4-342e-4894-a498-b0bb31335ee8"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "313/313 [==============================] - 5s 13ms/step - loss: 1.8861 - accuracy: 0.3350 - val_loss: 1.7801 - val_accuracy: 0.3782\n",
            "Epoch 2/100\n",
            "313/313 [==============================] - 3s 11ms/step - loss: 1.7768 - accuracy: 0.3771 - val_loss: 1.7471 - val_accuracy: 0.3955\n",
            "Epoch 3/100\n",
            "313/313 [==============================] - 4s 11ms/step - loss: 1.7377 - accuracy: 0.3918 - val_loss: 1.7116 - val_accuracy: 0.3997\n",
            "Epoch 4/100\n",
            "313/313 [==============================] - 4s 13ms/step - loss: 1.7048 - accuracy: 0.4064 - val_loss: 1.6913 - val_accuracy: 0.4165\n",
            "Epoch 5/100\n",
            "313/313 [==============================] - 3s 11ms/step - loss: 1.6806 - accuracy: 0.4146 - val_loss: 1.6744 - val_accuracy: 0.4120\n",
            "Epoch 6/100\n",
            "313/313 [==============================] - 3s 11ms/step - loss: 1.6542 - accuracy: 0.4224 - val_loss: 1.6613 - val_accuracy: 0.4286\n",
            "Epoch 7/100\n",
            "313/313 [==============================] - 4s 14ms/step - loss: 1.6376 - accuracy: 0.4291 - val_loss: 1.6504 - val_accuracy: 0.4293\n",
            "Epoch 8/100\n",
            "313/313 [==============================] - 3s 11ms/step - loss: 1.6187 - accuracy: 0.4338 - val_loss: 1.6478 - val_accuracy: 0.4285\n",
            "Epoch 9/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.6011 - accuracy: 0.4424 - val_loss: 1.6292 - val_accuracy: 0.4334\n",
            "Epoch 10/100\n",
            "313/313 [==============================] - 4s 12ms/step - loss: 1.5913 - accuracy: 0.4423 - val_loss: 1.6412 - val_accuracy: 0.4322\n",
            "Epoch 11/100\n",
            "313/313 [==============================] - 4s 13ms/step - loss: 1.5740 - accuracy: 0.4498 - val_loss: 1.6132 - val_accuracy: 0.4394\n",
            "Epoch 12/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.5615 - accuracy: 0.4529 - val_loss: 1.5957 - val_accuracy: 0.4457\n",
            "Epoch 13/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.5440 - accuracy: 0.4608 - val_loss: 1.5911 - val_accuracy: 0.4493\n",
            "Epoch 14/100\n",
            "313/313 [==============================] - 4s 13ms/step - loss: 1.5373 - accuracy: 0.4629 - val_loss: 1.5839 - val_accuracy: 0.4503\n",
            "Epoch 15/100\n",
            "313/313 [==============================] - 3s 11ms/step - loss: 1.5257 - accuracy: 0.4652 - val_loss: 1.5802 - val_accuracy: 0.4507\n",
            "Epoch 16/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.5160 - accuracy: 0.4675 - val_loss: 1.5825 - val_accuracy: 0.4487\n",
            "Epoch 17/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.5050 - accuracy: 0.4705 - val_loss: 1.5688 - val_accuracy: 0.4511\n",
            "Epoch 18/100\n",
            "313/313 [==============================] - 4s 14ms/step - loss: 1.4915 - accuracy: 0.4773 - val_loss: 1.5616 - val_accuracy: 0.4515\n",
            "Epoch 19/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.4859 - accuracy: 0.4758 - val_loss: 1.5577 - val_accuracy: 0.4580\n",
            "Epoch 20/100\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 1.4777 - accuracy: 0.4776 - val_loss: 1.5587 - val_accuracy: 0.4544\n",
            "Epoch 21/100\n",
            "313/313 [==============================] - 3s 11ms/step - loss: 1.4689 - accuracy: 0.4821 - val_loss: 1.5406 - val_accuracy: 0.4606\n",
            "Epoch 22/100\n",
            "313/313 [==============================] - 4s 12ms/step - loss: 1.4530 - accuracy: 0.4900 - val_loss: 1.5491 - val_accuracy: 0.4541\n",
            "Epoch 23/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.4448 - accuracy: 0.4900 - val_loss: 1.5346 - val_accuracy: 0.4613\n",
            "Epoch 24/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.4394 - accuracy: 0.4958 - val_loss: 1.5259 - val_accuracy: 0.4610\n",
            "Epoch 25/100\n",
            "313/313 [==============================] - 4s 13ms/step - loss: 1.4374 - accuracy: 0.4943 - val_loss: 1.5207 - val_accuracy: 0.4709\n",
            "Epoch 26/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.4246 - accuracy: 0.4980 - val_loss: 1.5281 - val_accuracy: 0.4633\n",
            "Epoch 27/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.4235 - accuracy: 0.4989 - val_loss: 1.5326 - val_accuracy: 0.4607\n",
            "Epoch 28/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.4222 - accuracy: 0.4999 - val_loss: 1.5125 - val_accuracy: 0.4743\n",
            "Epoch 29/100\n",
            "313/313 [==============================] - 4s 13ms/step - loss: 1.4094 - accuracy: 0.5038 - val_loss: 1.5143 - val_accuracy: 0.4684\n",
            "Epoch 30/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.4051 - accuracy: 0.5047 - val_loss: 1.5114 - val_accuracy: 0.4747\n",
            "Epoch 31/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.3989 - accuracy: 0.5082 - val_loss: 1.5037 - val_accuracy: 0.4712\n",
            "Epoch 32/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.3962 - accuracy: 0.5066 - val_loss: 1.5057 - val_accuracy: 0.4755\n",
            "Epoch 33/100\n",
            "313/313 [==============================] - 4s 13ms/step - loss: 1.3877 - accuracy: 0.5096 - val_loss: 1.5047 - val_accuracy: 0.4778\n",
            "Epoch 34/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.3824 - accuracy: 0.5140 - val_loss: 1.4986 - val_accuracy: 0.4739\n",
            "Epoch 35/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.3802 - accuracy: 0.5153 - val_loss: 1.4960 - val_accuracy: 0.4781\n",
            "Epoch 36/100\n",
            "313/313 [==============================] - 4s 12ms/step - loss: 1.3724 - accuracy: 0.5131 - val_loss: 1.4955 - val_accuracy: 0.4791\n",
            "Epoch 37/100\n",
            "313/313 [==============================] - 4s 11ms/step - loss: 1.3588 - accuracy: 0.5167 - val_loss: 1.4963 - val_accuracy: 0.4772\n",
            "Epoch 38/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.3605 - accuracy: 0.5192 - val_loss: 1.4906 - val_accuracy: 0.4796\n",
            "Epoch 39/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.3571 - accuracy: 0.5199 - val_loss: 1.4889 - val_accuracy: 0.4773\n",
            "Epoch 40/100\n",
            "313/313 [==============================] - 4s 13ms/step - loss: 1.3530 - accuracy: 0.5223 - val_loss: 1.4967 - val_accuracy: 0.4784\n",
            "Epoch 41/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.3558 - accuracy: 0.5187 - val_loss: 1.4893 - val_accuracy: 0.4820\n",
            "Epoch 42/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.3493 - accuracy: 0.5242 - val_loss: 1.4860 - val_accuracy: 0.4814\n",
            "Epoch 43/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.3445 - accuracy: 0.5213 - val_loss: 1.4846 - val_accuracy: 0.4796\n",
            "Epoch 44/100\n",
            "313/313 [==============================] - 4s 13ms/step - loss: 1.3335 - accuracy: 0.5304 - val_loss: 1.4862 - val_accuracy: 0.4834\n",
            "Epoch 45/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.3324 - accuracy: 0.5326 - val_loss: 1.4824 - val_accuracy: 0.4833\n",
            "Epoch 46/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.3242 - accuracy: 0.5332 - val_loss: 1.4808 - val_accuracy: 0.4846\n",
            "Epoch 47/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.3181 - accuracy: 0.5336 - val_loss: 1.4782 - val_accuracy: 0.4801\n",
            "Epoch 48/100\n",
            "313/313 [==============================] - 4s 13ms/step - loss: 1.3176 - accuracy: 0.5329 - val_loss: 1.4802 - val_accuracy: 0.4795\n",
            "Epoch 49/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.3149 - accuracy: 0.5327 - val_loss: 1.4774 - val_accuracy: 0.4822\n",
            "Epoch 50/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.3170 - accuracy: 0.5336 - val_loss: 1.4796 - val_accuracy: 0.4838\n",
            "Epoch 51/100\n",
            "313/313 [==============================] - 4s 12ms/step - loss: 1.3134 - accuracy: 0.5347 - val_loss: 1.4871 - val_accuracy: 0.4819\n",
            "Epoch 52/100\n",
            "313/313 [==============================] - 4s 11ms/step - loss: 1.3087 - accuracy: 0.5358 - val_loss: 1.4832 - val_accuracy: 0.4840\n",
            "Epoch 53/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.3028 - accuracy: 0.5380 - val_loss: 1.4846 - val_accuracy: 0.4852\n",
            "Epoch 54/100\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 1.2987 - accuracy: 0.5420 - val_loss: 1.4810 - val_accuracy: 0.4830\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 2.2 Exercise\n",
        "Change the [activation function of the dense layers (except the last one)](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dense) to rectified linear unit (ReLU) and the [weight initialization](https://www.tensorflow.org/api_docs/python/tf/keras/initializers) to the theoretically best one. Use the original model's code.\n",
        "\n",
        "Compile and train the model. Inspect the effects of the modifications."
      ],
      "metadata": {
        "id": "zQCDM1o1BBtF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# model definition with relu\n",
        "model = Sequential()\n",
        "model.add(Dense(128, activation='relu', kernel_initializer=HeNormal(), input_shape=(flattened_dim,)))\n",
        "model.add(Dense(128, activation='relu', kernel_initializer=HeNormal()))\n",
        "model.add(Dense(nb_classes, activation='softmax'))\n",
        "\n",
        "# loss function and optimizer\n",
        "model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "YjHAAh-wGu9O"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# training\n",
        "network_history = model.fit(X_train, Y_train,\n",
        "                            validation_data=(X_valid,Y_valid),\n",
        "                            batch_size=128,\n",
        "                            epochs=40,\n",
        "                            verbose=1)"
      ],
      "metadata": {
        "id": "rarwKM1wGxMz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b47a17af-ba58-4176-b2f3-e052df772896"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/40\n",
            "313/313 [==============================] - 4s 10ms/step - loss: 1.8168 - accuracy: 0.3808 - val_loss: 1.6689 - val_accuracy: 0.4277\n",
            "Epoch 2/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 1.5318 - accuracy: 0.4638 - val_loss: 1.5662 - val_accuracy: 0.4624\n",
            "Epoch 3/40\n",
            "313/313 [==============================] - 4s 12ms/step - loss: 1.4174 - accuracy: 0.5003 - val_loss: 1.5311 - val_accuracy: 0.4746\n",
            "Epoch 4/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 1.3376 - accuracy: 0.5294 - val_loss: 1.5051 - val_accuracy: 0.4834\n",
            "Epoch 5/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 1.2663 - accuracy: 0.5554 - val_loss: 1.5323 - val_accuracy: 0.4812\n",
            "Epoch 6/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 1.2068 - accuracy: 0.5785 - val_loss: 1.5169 - val_accuracy: 0.4884\n",
            "Epoch 7/40\n",
            "313/313 [==============================] - 4s 13ms/step - loss: 1.1496 - accuracy: 0.5957 - val_loss: 1.5203 - val_accuracy: 0.4919\n",
            "Epoch 8/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 1.1029 - accuracy: 0.6091 - val_loss: 1.5185 - val_accuracy: 0.4981\n",
            "Epoch 9/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 1.0639 - accuracy: 0.6255 - val_loss: 1.5656 - val_accuracy: 0.4892\n",
            "Epoch 10/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 1.0122 - accuracy: 0.6439 - val_loss: 1.5561 - val_accuracy: 0.4874\n",
            "Epoch 11/40\n",
            "313/313 [==============================] - 4s 12ms/step - loss: 0.9748 - accuracy: 0.6560 - val_loss: 1.6095 - val_accuracy: 0.4853\n",
            "Epoch 12/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 0.9383 - accuracy: 0.6682 - val_loss: 1.6043 - val_accuracy: 0.4881\n",
            "Epoch 13/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 0.8960 - accuracy: 0.6829 - val_loss: 1.6357 - val_accuracy: 0.4916\n",
            "Epoch 14/40\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 0.8583 - accuracy: 0.6980 - val_loss: 1.7202 - val_accuracy: 0.4831\n",
            "Epoch 15/40\n",
            "313/313 [==============================] - 4s 12ms/step - loss: 0.8196 - accuracy: 0.7066 - val_loss: 1.7275 - val_accuracy: 0.4831\n",
            "Epoch 16/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 0.7879 - accuracy: 0.7213 - val_loss: 1.7719 - val_accuracy: 0.4940\n",
            "Epoch 17/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 0.7605 - accuracy: 0.7322 - val_loss: 1.8174 - val_accuracy: 0.4907\n",
            "Epoch 18/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 0.7225 - accuracy: 0.7435 - val_loss: 1.8940 - val_accuracy: 0.4832\n",
            "Epoch 19/40\n",
            "313/313 [==============================] - 4s 13ms/step - loss: 0.6933 - accuracy: 0.7542 - val_loss: 1.9186 - val_accuracy: 0.4857\n",
            "Epoch 20/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 0.6642 - accuracy: 0.7646 - val_loss: 1.9554 - val_accuracy: 0.4793\n",
            "Epoch 21/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 0.6299 - accuracy: 0.7778 - val_loss: 2.0703 - val_accuracy: 0.4738\n",
            "Epoch 22/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 0.6127 - accuracy: 0.7843 - val_loss: 2.0618 - val_accuracy: 0.4915\n",
            "Epoch 23/40\n",
            "313/313 [==============================] - 4s 12ms/step - loss: 0.5893 - accuracy: 0.7911 - val_loss: 2.1287 - val_accuracy: 0.4833\n",
            "Epoch 24/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 0.5658 - accuracy: 0.8005 - val_loss: 2.2016 - val_accuracy: 0.4842\n",
            "Epoch 25/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 0.5534 - accuracy: 0.8060 - val_loss: 2.2841 - val_accuracy: 0.4706\n",
            "Epoch 26/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 0.5197 - accuracy: 0.8168 - val_loss: 2.2732 - val_accuracy: 0.4843\n",
            "Epoch 27/40\n",
            "313/313 [==============================] - 4s 13ms/step - loss: 0.4954 - accuracy: 0.8237 - val_loss: 2.3933 - val_accuracy: 0.4833\n",
            "Epoch 28/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 0.4736 - accuracy: 0.8314 - val_loss: 2.3860 - val_accuracy: 0.4844\n",
            "Epoch 29/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 0.4551 - accuracy: 0.8394 - val_loss: 2.5097 - val_accuracy: 0.4834\n",
            "Epoch 30/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 0.4455 - accuracy: 0.8435 - val_loss: 2.5173 - val_accuracy: 0.4787\n",
            "Epoch 31/40\n",
            "313/313 [==============================] - 4s 12ms/step - loss: 0.4422 - accuracy: 0.8435 - val_loss: 2.6203 - val_accuracy: 0.4678\n",
            "Epoch 32/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 0.4260 - accuracy: 0.8511 - val_loss: 2.7022 - val_accuracy: 0.4682\n",
            "Epoch 33/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 0.4072 - accuracy: 0.8579 - val_loss: 2.6793 - val_accuracy: 0.4778\n",
            "Epoch 34/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 0.3850 - accuracy: 0.8645 - val_loss: 2.7733 - val_accuracy: 0.4743\n",
            "Epoch 35/40\n",
            "313/313 [==============================] - 4s 12ms/step - loss: 0.3576 - accuracy: 0.8752 - val_loss: 2.8834 - val_accuracy: 0.4696\n",
            "Epoch 36/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 0.3706 - accuracy: 0.8717 - val_loss: 2.9319 - val_accuracy: 0.4708\n",
            "Epoch 37/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 0.3646 - accuracy: 0.8723 - val_loss: 2.9615 - val_accuracy: 0.4719\n",
            "Epoch 38/40\n",
            "313/313 [==============================] - 3s 9ms/step - loss: 0.3369 - accuracy: 0.8831 - val_loss: 3.1561 - val_accuracy: 0.4715\n",
            "Epoch 39/40\n",
            "313/313 [==============================] - 4s 12ms/step - loss: 0.3322 - accuracy: 0.8837 - val_loss: 3.1284 - val_accuracy: 0.4676\n",
            "Epoch 40/40\n",
            "313/313 [==============================] - 3s 10ms/step - loss: 0.3195 - accuracy: 0.8888 - val_loss: 3.1713 - val_accuracy: 0.4737\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 2.3. Exercise\n",
        "Based on the modifications above, and by any further modifications (e.g. more layers, less layers, more neurons/layer, etc.) to the model design, find a combination that is able to achieve **validation accuracy, that is higher than 53%**.\n"
      ],
      "metadata": {
        "id": "j1tGVPdD-pp3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "es = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)"
      ],
      "metadata": {
        "id": "5dBQxJHIHrbd"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# model definition\n",
        "model = Sequential()\n",
        "model.add(Dense(512, activation='relu', kernel_initializer=HeNormal(), input_shape=(3072,)))\n",
        "model.add(Dropout(0.3))\n",
        "model.add(Dense(256, activation='relu', kernel_initializer=HeNormal()))\n",
        "model.add(Dropout(0.3))\n",
        "model.add(Dense(128, activation='relu', kernel_initializer=HeNormal()))\n",
        "model.add(Dense(nb_classes, activation='softmax'))\n",
        "\n",
        "# loss function and optimizer\n",
        "model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "PuxHOqLt-3Nd"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# training\n",
        "network_history = model.fit(X_train, Y_train,\n",
        "                            validation_data=(X_valid,Y_valid),\n",
        "                            batch_size=128,\n",
        "                            epochs=100,\n",
        "                            verbose=1,\n",
        "                            callbacks=[es])\n"
      ],
      "metadata": {
        "id": "u8tFNCNVHyt9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "57b605a0-afe3-45ac-ac19-a25307aff7fa"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "313/313 [==============================] - 13s 40ms/step - loss: 2.0466 - accuracy: 0.2925 - val_loss: 1.7382 - val_accuracy: 0.3925\n",
            "Epoch 2/100\n",
            "313/313 [==============================] - 13s 41ms/step - loss: 1.7840 - accuracy: 0.3634 - val_loss: 1.6615 - val_accuracy: 0.4194\n",
            "Epoch 3/100\n",
            "313/313 [==============================] - 12s 39ms/step - loss: 1.6778 - accuracy: 0.4035 - val_loss: 1.6090 - val_accuracy: 0.4367\n",
            "Epoch 4/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 1.6158 - accuracy: 0.4224 - val_loss: 1.5565 - val_accuracy: 0.4557\n",
            "Epoch 5/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 1.5743 - accuracy: 0.4402 - val_loss: 1.5316 - val_accuracy: 0.4666\n",
            "Epoch 6/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 1.5286 - accuracy: 0.4548 - val_loss: 1.5015 - val_accuracy: 0.4758\n",
            "Epoch 7/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 1.4938 - accuracy: 0.4706 - val_loss: 1.4665 - val_accuracy: 0.4828\n",
            "Epoch 8/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 1.4668 - accuracy: 0.4775 - val_loss: 1.4537 - val_accuracy: 0.4913\n",
            "Epoch 9/100\n",
            "313/313 [==============================] - 11s 37ms/step - loss: 1.4373 - accuracy: 0.4879 - val_loss: 1.4330 - val_accuracy: 0.4956\n",
            "Epoch 10/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 1.4166 - accuracy: 0.4954 - val_loss: 1.4112 - val_accuracy: 0.5067\n",
            "Epoch 11/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 1.3918 - accuracy: 0.5039 - val_loss: 1.4161 - val_accuracy: 0.5092\n",
            "Epoch 12/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 1.3743 - accuracy: 0.5102 - val_loss: 1.3902 - val_accuracy: 0.5125\n",
            "Epoch 13/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 1.3539 - accuracy: 0.5155 - val_loss: 1.3900 - val_accuracy: 0.5066\n",
            "Epoch 14/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 1.3316 - accuracy: 0.5241 - val_loss: 1.3893 - val_accuracy: 0.5180\n",
            "Epoch 15/100\n",
            "313/313 [==============================] - 12s 39ms/step - loss: 1.3154 - accuracy: 0.5303 - val_loss: 1.3990 - val_accuracy: 0.5072\n",
            "Epoch 16/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 1.2981 - accuracy: 0.5358 - val_loss: 1.3632 - val_accuracy: 0.5258\n",
            "Epoch 17/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 1.2852 - accuracy: 0.5413 - val_loss: 1.3745 - val_accuracy: 0.5229\n",
            "Epoch 18/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 1.2686 - accuracy: 0.5473 - val_loss: 1.3664 - val_accuracy: 0.5218\n",
            "Epoch 19/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 1.2465 - accuracy: 0.5531 - val_loss: 1.3450 - val_accuracy: 0.5365\n",
            "Epoch 20/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 1.2344 - accuracy: 0.5599 - val_loss: 1.3404 - val_accuracy: 0.5378\n",
            "Epoch 21/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 1.2290 - accuracy: 0.5616 - val_loss: 1.3413 - val_accuracy: 0.5326\n",
            "Epoch 22/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 1.2145 - accuracy: 0.5631 - val_loss: 1.3619 - val_accuracy: 0.5181\n",
            "Epoch 23/100\n",
            "313/313 [==============================] - 13s 41ms/step - loss: 1.1965 - accuracy: 0.5745 - val_loss: 1.3317 - val_accuracy: 0.5346\n",
            "Epoch 24/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 1.1824 - accuracy: 0.5781 - val_loss: 1.3304 - val_accuracy: 0.5348\n",
            "Epoch 25/100\n",
            "313/313 [==============================] - 11s 35ms/step - loss: 1.1718 - accuracy: 0.5795 - val_loss: 1.3323 - val_accuracy: 0.5350\n",
            "Epoch 26/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 1.1589 - accuracy: 0.5882 - val_loss: 1.3208 - val_accuracy: 0.5391\n",
            "Epoch 27/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 1.1398 - accuracy: 0.5936 - val_loss: 1.3262 - val_accuracy: 0.5433\n",
            "Epoch 28/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 1.1308 - accuracy: 0.5948 - val_loss: 1.3414 - val_accuracy: 0.5389\n",
            "Epoch 29/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 1.1151 - accuracy: 0.6011 - val_loss: 1.3237 - val_accuracy: 0.5387\n",
            "Epoch 30/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 1.1095 - accuracy: 0.6067 - val_loss: 1.3215 - val_accuracy: 0.5459\n",
            "Epoch 31/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 1.0998 - accuracy: 0.6078 - val_loss: 1.3194 - val_accuracy: 0.5420\n",
            "Epoch 32/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 1.0862 - accuracy: 0.6144 - val_loss: 1.3141 - val_accuracy: 0.5517\n",
            "Epoch 33/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 1.0710 - accuracy: 0.6163 - val_loss: 1.3418 - val_accuracy: 0.5401\n",
            "Epoch 34/100\n",
            "313/313 [==============================] - 12s 38ms/step - loss: 1.0651 - accuracy: 0.6188 - val_loss: 1.3117 - val_accuracy: 0.5482\n",
            "Epoch 35/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 1.0487 - accuracy: 0.6255 - val_loss: 1.3231 - val_accuracy: 0.5494\n",
            "Epoch 36/100\n",
            "313/313 [==============================] - 13s 41ms/step - loss: 1.0469 - accuracy: 0.6262 - val_loss: 1.3238 - val_accuracy: 0.5441\n",
            "Epoch 37/100\n",
            "313/313 [==============================] - 13s 41ms/step - loss: 1.0371 - accuracy: 0.6287 - val_loss: 1.3147 - val_accuracy: 0.5458\n",
            "Epoch 38/100\n",
            "313/313 [==============================] - 12s 37ms/step - loss: 1.0253 - accuracy: 0.6321 - val_loss: 1.3147 - val_accuracy: 0.5482\n",
            "Epoch 39/100\n",
            "313/313 [==============================] - 11s 36ms/step - loss: 1.0145 - accuracy: 0.6353 - val_loss: 1.3344 - val_accuracy: 0.5458\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 3. Evaluation on test data and inference\n",
        "At this point, we will perform a basic evaluation and inference. With the model.evaluate function, the same metrics are calculated, that were used during training:"
      ],
      "metadata": {
        "id": "2FtKp-a2-A9m"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(model.evaluate(X_test, Y_test))"
      ],
      "metadata": {
        "id": "I3_9wgDREUna",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "34437266-5fba-49db-91e2-82817dd2a5a3"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "313/313 [==============================] - 1s 5ms/step - loss: 1.2973 - accuracy: 0.5424\n",
            "[1.2972822189331055, 0.5424000024795532]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "we would like to see similar values, as in the validation set. If those are close to each other, then the generalization ability of the model is good (in case of an independent test-set)."
      ],
      "metadata": {
        "id": "ECHguBFtGL7f"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 3.1. Exercise\n",
        "Predict the class of the first 10 elements in the test set, and compare the predicted values with the actual, target values in the test set. Hints:\n",
        "* you can use [model.predict](https://www.activestate.com/resources/quick-reads/how-to-use-a-model-to-do-predictions-with-keras/) for prediction\n",
        "* from the output you can select the largest value with the [argmax() function of Numpy](https://stackoverflow.com/questions/62358642/convert-one-hot-encoding-back-to-number-label). As there are multiple values, you have to call it with axis=1 parameter.\n",
        "* it is enought to compare the predictions and the targets by printing the values out and inspecting them."
      ],
      "metadata": {
        "id": "0Io4zYJeHjz6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "preds = model.predict(X_test[:10])\n",
        "preds_dense = np.argmax(preds, axis=1)\n",
        "\n",
        "#with np.printoptions(threshold=np.inf):\n",
        "#    print(preds_dense)\n",
        "\n",
        "\n",
        "# Print the predicted and actual classes for comparison\n",
        "print(\"Target labels:   \\n\", Y_test[:10])\n",
        "print(\"Predicted labels:\", preds_dense[:10])"
      ],
      "metadata": {
        "id": "XEEyU7exILqF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b9b8837f-a53f-40ad-ccdf-bb1e656d3059"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 137ms/step\n",
            "Target labels:   \n",
            " [[0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]\n",
            " [0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]\n",
            " [1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0. 0. 1. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0. 0. 1. 0. 0. 0.]\n",
            " [0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0. 0. 1. 0. 0. 0.]\n",
            " [0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]]\n",
            "Predicted labels: [3 8 1 0 4 6 1 6 4 1]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Before comparision, you have to convert back the one-hot encoded target values the same way, as you converted the output of the neural network to class values with argmax() function."
      ],
      "metadata": {
        "id": "seZTEFI-I5cZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Target labels:   \", np.argmax(Y_test[:10],axis=1))\n",
        "print(\"Predicted labels:\", preds_dense)"
      ],
      "metadata": {
        "id": "PHLvoMuIIkJ6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "51c6b3a7-2129-4265-9dac-f9bb07c5515e"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Target labels:    [3 8 8 0 6 6 1 6 3 1]\n",
            "Predicted labels: [3 8 1 0 4 6 1 6 4 1]\n"
          ]
        }
      ]
    }
  ]
}
